{"config":{"lang":["en","ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"textcase  <p>   A feature-rich Python text case conversion library. </p> <p> </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Text case conversion: Convert strings between various text cases (e.g., snake_case, kebab-case, camelCase, etc.).</li> <li>Extensible Design: Easily extend the library with custom cases and boundaries.</li> <li>Acronym Handling: Properly detects and formats acronyms in strings (as in <code>HTTPRequest</code>).</li> <li>Non-ASCII Support: Handles non-ASCII characters seamlessly (no inferences on the input language itself is made).</li> <li>100% Test Coverage: Comprehensive tests ensure reliability and correctness.</li> <li>Well-Documented: Clean documentation with usage examples for easy understanding.</li> <li>Performant: Efficient implementation without the use of regular expressions.</li> <li>Zero Dependencies: The library has no external dependencies, making it lightweight and easy to integrate.</li> </ul>"},{"location":"#installation","title":"Installation","text":"pip install textcaseDone!"},{"location":"#usage","title":"Usage","text":"<p>You can convert strings into a case using the <code>convert</code> function:</p> convert.pyoutput.txt <pre><code>from textcase import case, convert\n\nprint(convert(\"ronnie james dio\", case.SNAKE))\nprint(convert(\"Ronnie_James_dio\", case.CONSTANT))\nprint(convert(\"RONNIE_JAMES_DIO\", case.KEBAB))\nprint(convert(\"ronnie james dio\", case.MIDDOT))\nprint(convert(\"RONNIE-JAMES-DIO\", case.CAMEL))\nprint(convert(\"ronnie-james-dio\", case.PASCAL))\nprint(convert(\"RONNIE JAMES DIO\", case.LOWER))\nprint(convert(\"ronnie james dio\", case.UPPER))\nprint(convert(\"ronnie-james-dio\", case.TITLE))\nprint(convert(\"ronnie james dio\", case.SENTENCE))\n</code></pre> <pre><code>ronnie_james_dio\nRONNIE_JAMES_DIO\nronnie-james-dio\nronnie\u00b7james\u00b7dio\nronnieJamesDio\nRonnieJamesDio\nronnie james dio\nRONNIE JAMES DIO\nRonnie James Dio\nRonnie james dio\n</code></pre> <p>By default, <code>convert</code> and <code>CaseConverter.convert</code> will split along a set of default word boundaries, that is:</p> <ul> <li>Underscores: <code>_</code>,</li> <li>Hyphens: <code>-</code>,</li> <li>Spaces: <code></code>,</li> <li>Changes in capitalization from lowercase to uppercase: <code>aA</code>,</li> <li>Adjacent digits and letters: <code>a1</code>, <code>1a</code>, <code>A1</code>, <code>1A</code>,</li> <li>Acronyms: <code>AAa</code> (as in <code>HTTPRequest</code>).</li> </ul> <p>For more precision, you can specify boundaries to split based on the word boundaries of a particular case. For example, you can explicitly specify which boundaries will be used:</p> precision.pyoutput.txt <pre><code>from textcase import boundary, case, convert\n\nprint(convert(\"2020-04-16_my_cat_cali\", case.TITLE))\nprint(convert(\"2020-04-16_my_cat_cali\", case.TITLE, (boundary.UNDERSCORE,)))\n</code></pre> <pre><code>2020 04 16 My Cat Cali\n2020-04-16 My Cat Cali\n</code></pre> <p>This library can detect acronyms in camel-like strings. It also ignores any leading, trailing, or duplicate delimiters:</p> acronyms.pyoutput.txt <pre><code>from textcase import case, convert\n\nprint(convert(\"IOStream\", case.SNAKE))\nprint(convert(\"myJSONParser\", case.SNAKE))\nprint(convert(\"__weird--var _name-\", case.SNAKE))\n</code></pre> <pre><code>io_stream\nmy_json_parser\nweird_var_name\n</code></pre> <p>The library also supports non-ASCII characters. However, no inferences on the input language itself is made. For example, in Dutch, the digraph \"ij\" is treated as two separate Unicode characters and will not be capitalized. In contrast, the character \"\u00e6\" will be capitalized as expected. Also, in English the text \"I THINK I DO\" will be converted to \"i think i do\", not \"I think I do\". This means that the library can handle various characters:</p> non_ascii.pyoutput.txt <pre><code>from textcase import case, convert\n\nprint(convert(\"Granat\u00c4pfel\", case.KEBAB))\nprint(convert(\"\u041f\u0415\u0420\u0421\u041f\u0415\u041a\u0422\u0418\u0412\u041024\", case.TITLE))\nprint(convert(\"\u1f48\u0394\u03a5\u03a3\u03a3\u0395\u038e\u03a3\", case.LOWER))\n</code></pre> <pre><code>granat-\u00e4pfel\n\u041f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u0430 24\n\u1f40\u03b4\u03c5\u03c3\u03c3\u03b5\u03cd\u03c2\n</code></pre> <p>By default, characters followed by digits and vice-versa are considered word boundaries. In addition, any special ASCII characters (besides <code>_</code> and <code>-</code>) are ignored:</p> special.pyoutput.txt <pre><code>from textcase import case, convert\n\nprint(repr(convert(\"E5150\", case.SNAKE)))\nprint(repr(convert(\"10,000Days\", case.SNAKE)))\nprint(repr(convert(\"Hello, world!\", case.UPPER)))\nprint(repr(convert(\"ONE\\nTWO\\nTHREE\", case.TITLE)))\n</code></pre> <pre><code>'e_5150'\n'10,000_days'\n'HELLO, WORLD!'\n'One\\ntwo\\nthree'\n</code></pre> <p>You can also test what case a string is in:</p> is_case.pyoutput.txt <pre><code>from textcase import case, is_case\n\nprint(is_case(\"css-class-name\", case.KEBAB))\nprint(is_case(\"css-class-name\", case.SNAKE))\nprint(is_case(\"UPPER_CASE_VAR\", case.SNAKE))\n</code></pre> <pre><code>True\nFalse\nFalse\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#031-2025-04-13","title":"0.3.1 (2025-04-13)","text":"<p>Adds <code>py.typed</code> file.</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>add <code>py.typed</code> file (<code>a2611af</code>)</li> </ul>"},{"location":"changelog/#030-2025-04-13","title":"0.3.0 (2025-04-13)","text":"<p>Simplification of custom <code>Boundary</code> creation from a delimiter, and addition of the new <code>MIDDOT</code> case.</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>add <code>Boundary.from_delimiter</code> (#10) (<code>ff46f04</code>)</li> <li>add <code>INTERPUNCT</code> boundary and <code>MIDDOT</code> case (#11) (<code>8cf450b</code>)</li> </ul>"},{"location":"changelog/#023-2025-04-13","title":"0.2.3 (2025-04-13)","text":"<p>Acronym identification fixes.</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>update ACRONYM to correctly identify acronym boundaries (<code>dd604b0</code>)</li> </ul>"},{"location":"changelog/#022-2025-04-12","title":"0.2.2 (2025-04-12)","text":"<p>Performance and documentation enhancements.</p>"},{"location":"changelog/#performance","title":"Performance","text":"<ul> <li>optimize boundary conditions (<code>27cbbb2</code>)</li> </ul>"},{"location":"changelog/#021-2025-04-02","title":"0.2.1 (2025-04-02)","text":"<p>Expands test coverage with new tests for edge cases and conversions.</p>"},{"location":"changelog/#testing","title":"Testing","text":"<ul> <li>add boundary custom tests (<code>5602ed0</code>)</li> <li>add case custom tests (<code>b26a3c1</code>)</li> <li>add converter complex test (<code>4b1f3a9</code>)</li> <li>add is_case tests (<code>8f9b2d3</code>)</li> <li>add convert cases tests (<code>4b5c110</code>)</li> <li>add convert acronyms tests (<code>cc3cdcc</code>)</li> <li>add convert non ascii tests (<code>c4fdd55</code>)</li> <li>add case precision tests (<code>6055e41</code>)</li> <li>add test special tests (<code>ad2a3ec</code>)</li> <li>add pattern tests (<code>e03f54e</code>)</li> </ul>"},{"location":"changelog/#020-2025-04-01","title":"0.2.0 (2025-04-01)","text":"<p>Adds initial functionality for text case conversion, with extensibility possible.</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>use final for case constants (<code>5228e8d</code>)</li> <li>use lower instead of upper for LOWER case (<code>cce6ed7</code>)</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>add text case transformation patterns (<code>b003fac</code>)</li> <li>add conditions for splitting an identifier into words (<code>fb76228</code>)</li> <li>add case definitions for text transformation (<code>cf32822</code>)</li> <li>add text case conversion between different case formats (<code>a11044d</code>)</li> <li>add utils (<code>1f86e1a</code>)</li> <li>add boundaries to convert function (<code>0b9ea8a</code>)</li> <li>add initial functionality (#1) (<code>3073ae6</code>)</li> </ul>"},{"location":"changelog/#testing_1","title":"Testing","text":"<ul> <li>include doctests in pytest (<code>699c5a6</code>)</li> <li>ignore testmod (<code>04f6862</code>)</li> <li>add converter tests (<code>d045a97</code>)</li> </ul>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>use python &gt;=3.9 (<code>a30d61c</code>)</li> </ul>"},{"location":"changelog/#010-2025-03-31","title":"0.1.0 (2025-03-31)","text":"<p>Initial release.</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>init (<code>22ec6ca</code>)</li> </ul>"},{"location":"changelog/#new-contributors","title":"New Contributors","text":"<ul> <li>@zobweyt made their first contribution</li> </ul>"},{"location":"learn/boundaries/","title":"Boundaries","text":""},{"location":"learn/boundaries/#boundary-specificity","title":"Boundary Specificity","text":"<p>It can be difficult to determine how to split a string into words. That is why the <code>convert</code> uses a set of default word boundaries, but sometimes that isn\u2019t enough to meet a specific use case.</p> <p>Say a string has the word <code>2D</code>, such as <code>scale2D</code>. No exclusive usage of <code>convert</code> will be enough to solve the problem. In this case we can further specify which boundaries to split the string on. This library provides some templates for achieving this specificity. We can specify what boundaries we want to split on using instances of the <code>Boundary</code> class:</p> specificity.pyoutput.txt <pre><code>from textcase import boundary, case, convert\n\n# Not quite what we want\nprint(convert(\"scale2D\", case.SNAKE, case.CAMEL.boundaries))\n\n# Write boundaries explicitly\nprint(convert(\"scale2D\", case.SNAKE, (boundary.LOWER_DIGIT,)))\n</code></pre> <pre><code>scale_2_d\nscale_2d\n</code></pre>"},{"location":"learn/boundaries/#custom-boundaries","title":"Custom Boundaries","text":"<p>This library provides a number of constants for boundaries associated with common cases. But you can create your own boundary to split on other criteria:</p> custom.pyoutput.txt <pre><code>from textcase import case, convert\nfrom textcase.boundary import Boundary\n\n# Not quite what we want\nprint(convert(\"coolers.revenge\", case.TITLE))\n\n# Use custom boundary\nprint(convert(\"coolers.revenge\", case.TITLE, (Boundary.from_delimiter(\".\"),)))\n\n# Define complex custom boundary\nAT_LETTER = Boundary(\n    satisfies=lambda text: (len(text) &gt; 1 and text[0] == \"@\") and (text[1] == text[1].lower()),\n    start=1,\n    length=0,\n)\n\nprint(convert(\"name@domain\", case.TITLE, (AT_LETTER,)))\n</code></pre> <pre><code>Coolers.revenge\nCoolers Revenge\nName@ Domain\n</code></pre> <p>To learn more about building a custom boundary from scratch, take a look at the textcase.boundary.Boundary class.</p>"},{"location":"learn/cases/","title":"Cases","text":""},{"location":"learn/cases/#custom-case","title":"Custom Case","text":"<p>Simular to <code>Boundary</code>, there is <code>Case</code> that exposes the three components necessary for case conversion. This allows you to define a custom case that behaves appropriately in the <code>convert</code> and other functions:</p> custom_convert.pyoutput.txt <pre><code>from textcase import convert\nfrom textcase.boundary import Boundary\nfrom textcase.case import Case\nfrom textcase.pattern import lower\n\n# Define custom boundary\nDOT = Boundary(\n    satisfies=lambda text: text.startswith(\".\"),\n    length=1,\n)\n\n# Define custom case\nDOT_CASE = Case(\n    boundaries=(DOT,),\n    pattern=lower,\n    delimiter=\".\",\n)\n\nprint(convert(\"Dot case var\", DOT_CASE))\n</code></pre> <pre><code>dot.case.var\n</code></pre> <p>And because we defined boundary conditions, this means <code>textcase.is_case</code> should also behave as expected:</p> custom_is_case.pyoutput.txt <pre><code>from textcase import is_case\nfrom textcase.boundary import Boundary\nfrom textcase.case import Case\nfrom textcase.pattern import lower\n\n# Define custom boundary\nDOT = Boundary(\n    satisfies=lambda text: text.startswith(\".\"),\n    length=1,\n)\n\n# Define custom case\nDOT_CASE = Case(\n    boundaries=(DOT,),\n    pattern=lower,\n    delimiter=\".\",\n)\n\nprint(is_case(\"dot.case.var\", DOT_CASE))\nprint(is_case(\"Dot case var\", DOT_CASE))\n</code></pre> <pre><code>True\nFalse\n</code></pre> <p>To learn more about building a custom case from scratch, take a look at the textcase.case.Case class.</p>"},{"location":"learn/converter/","title":"Converter","text":""},{"location":"learn/converter/#case-converter-class","title":"Case Converter Class","text":"<p>Case conversion takes place in two parts. The first splits an identifier into a series of words, and the second joins the words back together. Each of these are steps are defined using the <code>CaseConverter.from_case</code> and <code>CaseConverter.to_case</code> functions respectively.</p> <p><code>CaseConverter</code> is a class that encapsulates the boundaries used for splitting and the pattern and delimiter for mutating and joining. The <code>CaseConverter.convert</code> method will apply the boundaries, pattern, and delimiter appropriately. This lets you define the parameters for case conversion upfront:</p> converter.pyoutput.txt <pre><code>from textcase import CaseConverter, case, pattern\n\nconverter = CaseConverter()\nconverter.pattern = pattern.camel\nconverter.delimiter = \"_\"\n\nprint(converter.convert(\"My Special Case\"))\n\nconverter.from_case(case.CAMEL)\nconverter.to_case(case.SNAKE)\n\nprint(converter.convert(\"mySpecialCase\"))\n</code></pre> <pre><code>my_Special_Case\nmy_special_case\n</code></pre> <p>For more details on how strings are converted, see the docs for textcase.converter.CaseConverter.</p>"},{"location":"reference/boundary/","title":"textcase.boundary","text":""},{"location":"reference/boundary/#textcase.boundary","title":"textcase.boundary","text":"<p>Conditions for splitting an identifier into words.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.UNDERSCORE","title":"UNDERSCORE  <code>module-attribute</code>","text":"<pre><code>UNDERSCORE = from_delimiter('_')\n</code></pre> <p>Splits on <code>_</code>, consuming the character on segmentation.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.HYPHEN","title":"HYPHEN  <code>module-attribute</code>","text":"<pre><code>HYPHEN = from_delimiter('-')\n</code></pre> <p>Splits on <code>-</code>, consuming the character on segmentation.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.SPACE","title":"SPACE  <code>module-attribute</code>","text":"<pre><code>SPACE = from_delimiter(' ')\n</code></pre> <p>Splits on <code></code>, consuming the character on segmentation.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.INTERPUNCT","title":"INTERPUNCT  <code>module-attribute</code>","text":"<pre><code>INTERPUNCT = from_delimiter('\u00b7')\n</code></pre> <p>Splits on <code>\u00b7</code>, consuming the character on segmentation.</p> <p>Added in version: <code>0.3.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.LOWER_UPPER","title":"LOWER_UPPER  <code>module-attribute</code>","text":"<pre><code>LOWER_UPPER = Boundary(satisfies=lambda text: islower() and isupper(), start=1)\n</code></pre> <p>Splits where a lowercase letter is followed by an uppercase letter.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.UPPER_LOWER","title":"UPPER_LOWER  <code>module-attribute</code>","text":"<pre><code>UPPER_LOWER = Boundary(satisfies=lambda text: isupper() and islower(), start=1)\n</code></pre> <p>Splits where an uppercase letter is followed by a lowercase letter.</p> <p>This is seldom used and is not included in the <code>DEFAULT_BOUNDARIES</code>.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.ACRONYM","title":"ACRONYM  <code>module-attribute</code>","text":"<pre><code>ACRONYM = Boundary(satisfies=lambda text: isalpha() and isupper() and islower(), start=1)\n</code></pre> <p>Acronyms are identified by two uppercase letters followed by a lowercase letter.</p> <p>The word boundary is between the two uppercase letters. For example, \"HTTPRequest\" would have an acronym boundary identified at \"PRe\" and split into \"HTTP\" and \"Request\".</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.LOWER_DIGIT","title":"LOWER_DIGIT  <code>module-attribute</code>","text":"<pre><code>LOWER_DIGIT = Boundary(satisfies=lambda text: islower() and isdigit(), start=1)\n</code></pre> <p>Splits where a lowercase letter is followed by a digit.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.UPPER_DIGIT","title":"UPPER_DIGIT  <code>module-attribute</code>","text":"<pre><code>UPPER_DIGIT = Boundary(satisfies=lambda text: isupper() and isdigit(), start=1)\n</code></pre> <p>Splits where an uppercase letter is followed by a digit.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.DIGIT_LOWER","title":"DIGIT_LOWER  <code>module-attribute</code>","text":"<pre><code>DIGIT_LOWER = Boundary(satisfies=lambda text: isdigit() and islower(), start=1)\n</code></pre> <p>Splits where digit is followed by a lowercase letter.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.DIGIT_UPPER","title":"DIGIT_UPPER  <code>module-attribute</code>","text":"<pre><code>DIGIT_UPPER = Boundary(satisfies=lambda text: isdigit() and isupper(), start=1)\n</code></pre> <p>Splits where digit is followed by an uppercase letter.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.DEFAULT_BOUNDARIES","title":"DEFAULT_BOUNDARIES  <code>module-attribute</code>","text":"<pre><code>DEFAULT_BOUNDARIES = (\n    UNDERSCORE,\n    HYPHEN,\n    SPACE,\n    LOWER_UPPER,\n    LOWER_DIGIT,\n    UPPER_DIGIT,\n    DIGIT_LOWER,\n    DIGIT_UPPER,\n    ACRONYM,\n)\n</code></pre> <p>Default boundaries used for splitting strings into words.</p> <ul> <li>Underscores: <code>_</code>,</li> <li>Hyphens: <code>-</code>,</li> <li>Spaces: <code></code>,</li> <li>Changes in capitalization from lowercase to uppercase: <code>aA</code>,</li> <li>Adjacent digits and letters: <code>a1</code>, <code>1a</code>, <code>A1</code>, <code>1A</code>,</li> <li>Acronyms: <code>AAa</code> (as in <code>HTTPRequest</code>).</li> </ul> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.Boundary","title":"Boundary  <code>dataclass</code>","text":"<pre><code>Boundary(satisfies, start=0, length=0)\n</code></pre> <p>Represents a condition for splitting an identifier into words.</p> <p>Some boundaries, <code>HYPHEN</code>, <code>UNDERSCORE</code>, and <code>SPACE</code>, consume the character they split on, whereas the other boundaries do not.</p> <p>Added in version: <code>0.2.0</code></p> <p>Examples:</p> <pre><code>from textcase.boundary import Boundary\n\nUNDERSCORE = Boundary(\n    satisfies=lambda text: text.startswith(\"_\"),\n    length=1,\n)\n</code></pre>"},{"location":"reference/boundary/#textcase.boundary.Boundary.satisfies","title":"satisfies  <code>instance-attribute</code>","text":"<pre><code>satisfies\n</code></pre> <p>A function that determines if this boundary is present at the start of the string.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.Boundary.start","title":"start  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start = 0\n</code></pre> <p>Where the beginning of the boundary is.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.Boundary.length","title":"length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>length = 0\n</code></pre> <p>The length of the boundary. This is the number of graphemes that are removed when splitting.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/boundary/#textcase.boundary.Boundary.from_delimiter","title":"from_delimiter  <code>staticmethod</code>","text":"<pre><code>from_delimiter(delimiter)\n</code></pre> <p>Create a new <code>Boundary</code> instance from a delimiter string.</p> <p>This is a helper method that can be used to create simple boundaries such as <code>UNDERSCORE</code>, <code>HYPHEN</code>, <code>SPACE</code>, or <code>INTERPUNCT</code>.</p> <p>Added in version: <code>0.3.0</code></p> PARAMETER DESCRIPTION <code>delimiter</code> <p>A string to be used as the delimiter for creating the boundary.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Boundary</code> <p>A new <code>Boundary</code> instance, configured to match the provided delimiter.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Boundary.from_delimiter(\"_\").start\n0\n</code></pre> <pre><code>&gt;&gt;&gt; Boundary.from_delimiter(\"_\").length\n1\n</code></pre> Source code in <code>textcase/boundary.py</code> <pre><code>@staticmethod\ndef from_delimiter(delimiter: str) -&gt; \"Boundary\":\n    \"\"\"Create a new [`Boundary`][textcase.boundary.Boundary] instance from a delimiter string.\n\n    This is a helper method that can be used to create simple boundaries such as\n    [`UNDERSCORE`][textcase.boundary.UNDERSCORE], [`HYPHEN`][textcase.boundary.HYPHEN],\n    [`SPACE`][textcase.boundary.SPACE], or [`INTERPUNCT`][textcase.boundary.INTERPUNCT].\n\n    **Added in version:** [`0.3.0`](https://zobweyt.github.io/textcase/changelog/#030-2025-04-13)\n\n    Args:\n        delimiter: A string to be used as the delimiter for creating the boundary.\n\n    Returns:\n        A new [`Boundary`][textcase.boundary.Boundary] instance, configured to match the provided delimiter.\n\n    Examples:\n        &gt;&gt;&gt; Boundary.from_delimiter(\"_\").start\n        0\n\n        &gt;&gt;&gt; Boundary.from_delimiter(\"_\").length\n        1\n    \"\"\"\n    return Boundary(\n        satisfies=lambda text: text[:1] == delimiter,\n        length=len(delimiter),\n    )\n</code></pre>"},{"location":"reference/boundary/#textcase.boundary.split","title":"split","text":"<pre><code>split(text, boundaries=DEFAULT_BOUNDARIES)\n</code></pre> <p>Split an identifier into a list of words using the provided boundaries.</p> <p>This function iterates through the input text and splits it into words based on the specified boundary conditions. It yields each word found in the text, excluding empty strings.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>text</code> <p>The input string to be split into words.</p> <p> TYPE: <code>str</code> </p> <code>boundaries</code> <p>A collection of Boundary instances that define the split conditions.</p> <p> TYPE: <code>Iterable[Boundary]</code> DEFAULT: <code>DEFAULT_BOUNDARIES</code> </p> YIELDS DESCRIPTION <code>str</code> <p>An iterator over the words extracted from the input text.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert (\"one\", \"two\", \"three.four\") == tuple(split(\"one_two-three.four\", (UNDERSCORE, HYPHEN)))\n</code></pre> Source code in <code>textcase/boundary.py</code> <pre><code>def split(text: str, boundaries: Iterable[Boundary] = DEFAULT_BOUNDARIES) -&gt; Iterator[str]:\n    \"\"\"Split an identifier into a list of words using the provided boundaries.\n\n    This function iterates through the input text and splits it into words based on the\n    specified boundary conditions. It yields each word found in the text, excluding\n    empty strings.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        text: The input string to be split into words.\n        boundaries: A collection of Boundary instances that define the split conditions.\n\n    Yields:\n        An iterator over the words extracted from the input text.\n\n    Examples:\n        &gt;&gt;&gt; assert (\"one\", \"two\", \"three.four\") == tuple(split(\"one_two-three.four\", (UNDERSCORE, HYPHEN)))\n    \"\"\"\n    if not text:\n        return\n\n    last_boundary_end = 0\n    text_length = len(text)\n\n    for i in range(text_length):\n        for boundary in boundaries:\n            if boundary.satisfies(text[i:]):\n                boundary_byte_start = i + boundary.start\n                boundary_byte_end = boundary_byte_start + boundary.length\n                if last_boundary_end &lt; boundary_byte_start:\n                    yield text[last_boundary_end:boundary_byte_start]\n                last_boundary_end = boundary_byte_end\n                break\n\n    if last_boundary_end &lt; text_length:\n        yield text[last_boundary_end:]\n</code></pre>"},{"location":"reference/boundary/#textcase.boundary.get_boundaries","title":"get_boundaries","text":"<pre><code>get_boundaries(text)\n</code></pre> <p>Identifies boundaries present in the given <code>text</code>.</p> <p>This function checks the provided <code>text</code> against the default boundaries and returns those that are present. It evaluates each boundary condition and yields the boundaries that can split the <code>text</code> into multiple parts or that do not match the entire <code>text</code>.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>text</code> <p>The input string to be analyzed for boundaries.</p> <p> TYPE: <code>str</code> </p> YIELDS DESCRIPTION <code>Boundary</code> <p>An iterator over <code>Boundary</code> instances that are identified within the given <code>text</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; assert (HYPHEN, SPACE, LOWER_UPPER, UPPER_DIGIT, DIGIT_LOWER) == tuple(get_boundaries(\"aA8a -\"))\n&gt;&gt;&gt; assert (UNDERSCORE, LOWER_UPPER, DIGIT_UPPER, ACRONYM) == tuple(get_boundaries(\"bD:0B:_:AAa\"))\n</code></pre> Source code in <code>textcase/boundary.py</code> <pre><code>def get_boundaries(text: str) -&gt; Iterator[Boundary]:\n    \"\"\"Identifies boundaries present in the given `text`.\n\n    This function checks the provided `text` against the default boundaries and returns\n    those that are present. It evaluates each boundary condition and yields the boundaries\n    that can split the `text` into multiple parts or that do not match the entire `text`.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        text: The input string to be analyzed for boundaries.\n\n    Yields:\n        An iterator over [`Boundary`][textcase.boundary.Boundary] instances that are identified within the given `text`.\n\n    Examples:\n        &gt;&gt;&gt; assert (HYPHEN, SPACE, LOWER_UPPER, UPPER_DIGIT, DIGIT_LOWER) == tuple(get_boundaries(\"aA8a -\"))\n        &gt;&gt;&gt; assert (UNDERSCORE, LOWER_UPPER, DIGIT_UPPER, ACRONYM) == tuple(get_boundaries(\"bD:0B:_:AAa\"))\n    \"\"\"\n\n    for boundary in DEFAULT_BOUNDARIES:\n        parts = tuple(split(text, (boundary,)))\n\n        if len(parts) &gt; 1 or len(parts) == 0 or parts[0] != text:\n            yield boundary\n</code></pre>"},{"location":"reference/case/","title":"textcase.case","text":""},{"location":"reference/case/#textcase.case","title":"textcase.case","text":"<p>Case definitions for text transformation.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.SNAKE","title":"SNAKE  <code>module-attribute</code>","text":"<pre><code>SNAKE = Case(boundaries=(UNDERSCORE,), pattern=lower, delimiter='_')\n</code></pre> <p>Snake case strings are delimited by underscores <code>_</code> and are all lowercase.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.CONSTANT","title":"CONSTANT  <code>module-attribute</code>","text":"<pre><code>CONSTANT = Case(boundaries=(UNDERSCORE,), pattern=upper, delimiter='_')\n</code></pre> <p>Constant case strings are delimited by underscores <code>_</code> and are all uppercase.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.KEBAB","title":"KEBAB  <code>module-attribute</code>","text":"<pre><code>KEBAB = Case(boundaries=(HYPHEN,), pattern=lower, delimiter='-')\n</code></pre> <p>Kebab case strings are delimited by hyphens <code>-</code> and are all lowercase.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.MIDDOT","title":"MIDDOT  <code>module-attribute</code>","text":"<pre><code>MIDDOT = Case(boundaries=(INTERPUNCT,), pattern=lower, delimiter='\u00b7')\n</code></pre> <p>Middot case strings are delimited by interpuncts <code>\u00b7</code> and are all lowercase.</p> <p>Added in version: <code>0.3.0</code></p>"},{"location":"reference/case/#textcase.case.CAMEL","title":"CAMEL  <code>module-attribute</code>","text":"<pre><code>CAMEL = Case(boundaries=(LOWER_UPPER, ACRONYM, LOWER_DIGIT, UPPER_DIGIT, DIGIT_LOWER, DIGIT_UPPER), pattern=camel)\n</code></pre> <p>Camel case strings are lowercase, but for every word except the first the first letter is capitalized.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.PASCAL","title":"PASCAL  <code>module-attribute</code>","text":"<pre><code>PASCAL = Case(boundaries=(LOWER_UPPER, ACRONYM, LOWER_DIGIT, UPPER_DIGIT, DIGIT_LOWER, DIGIT_UPPER), pattern=capital)\n</code></pre> <p>Pascal case strings are lowercase, but for every word the first letter is capitalized.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.LOWER","title":"LOWER  <code>module-attribute</code>","text":"<pre><code>LOWER = Case(boundaries=(SPACE,), pattern=lower, delimiter=' ')\n</code></pre> <p>Lowercase strings are delimited by spaces and all characters are lowercase.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.UPPER","title":"UPPER  <code>module-attribute</code>","text":"<pre><code>UPPER = Case(boundaries=(SPACE,), pattern=upper, delimiter=' ')\n</code></pre> <p>Uppercase strings are delimited by spaces and all characters are uppercase.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.TITLE","title":"TITLE  <code>module-attribute</code>","text":"<pre><code>TITLE = Case(boundaries=(SPACE,), pattern=capital, delimiter=' ')\n</code></pre> <p>Title case strings are delimited by spaces. Only the leading character of each word is uppercase.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.SENTENCE","title":"SENTENCE  <code>module-attribute</code>","text":"<pre><code>SENTENCE = Case(boundaries=(SPACE,), pattern=sentence, delimiter=' ')\n</code></pre> <p>Sentence case strings are delimited by spaces. Only the leading character of the first word is uppercase.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.Case","title":"Case  <code>dataclass</code>","text":"<pre><code>Case(boundaries, pattern=lambda words: words, delimiter='')\n</code></pre> <p>Represents a text case format for transformation.</p> <p>Each case format defines how to split and transform text into a specific case style. The <code>Case</code> class includes boundaries for splitting words, a transformation pattern, and a delimiter for joining the words.</p> <p>Added in version: <code>0.2.0</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Case(boundaries=(SPACE,), pattern=capital, delimiter=\" \").delimiter\n' '\n</code></pre>"},{"location":"reference/case/#textcase.case.Case.boundaries","title":"boundaries  <code>instance-attribute</code>","text":"<pre><code>boundaries\n</code></pre> <p>The boundaries used to split the text into words.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.Case.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern = lambda words: words\n</code></pre> <p>A callable that defines how to transform the split words into the desired case format.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/case/#textcase.case.Case.delimiter","title":"delimiter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>delimiter = ''\n</code></pre> <p>The string used to join the transformed words together.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/converter/","title":"textcase.converter","text":""},{"location":"reference/converter/#textcase.converter","title":"textcase.converter","text":"<p>Text case conversion between different case formats.</p> <p>Added in version: <code>0.2.0</code></p> <p>Examples:</p> <pre><code>from textcase import CaseConverter, case\n\nconverter = CaseConverter()\nconverter.to_case(case.SNAKE)\nconverter.convert(\"myCatCali\")  # \"my_cat_cali\"\nconverter.to_case(case.CAMEL)\nconverter.convert(\"my_cat_cali\")  # \"myCatCali\"\n</code></pre>"},{"location":"reference/converter/#textcase.converter.CaseConverter","title":"CaseConverter","text":"<pre><code>CaseConverter()\n</code></pre> <p>Represents a utility class for converting text between different case formats.</p> <p>Added in version: <code>0.2.0</code></p> <p>Examples:</p> <pre><code>from textcase import CaseConverter, case\n\nconverter = CaseConverter()\nconverter.to_case(case.SNAKE)\nconverter.convert(\"myCatCali\")  # \"my_cat_cali\"\nconverter.to_case(case.CAMEL)\nconverter.convert(\"my_cat_cali\")  # \"myCatCali\"\n</code></pre> <p>Initializes a new <code>CaseConverter</code> instance with default boundaries and an identity pattern.</p> <p>Added in version: <code>0.2.0</code></p> Source code in <code>textcase/converter.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initializes a new `CaseConverter` instance with default boundaries and an identity pattern.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n    \"\"\"\n    self.boundaries = list(DEFAULT_BOUNDARIES)\n    self.pattern = lambda words: words\n    self.delimiter = \"\"\n</code></pre>"},{"location":"reference/converter/#textcase.converter.CaseConverter.boundaries","title":"boundaries  <code>instance-attribute</code>","text":"<pre><code>boundaries = list(DEFAULT_BOUNDARIES)\n</code></pre> <p>A list of boundary conditions used for splitting text into words.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/converter/#textcase.converter.CaseConverter.pattern","title":"pattern  <code>instance-attribute</code>","text":"<pre><code>pattern = lambda words: words\n</code></pre> <p>A callable that defines how to transform the split words into the desired case format.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/converter/#textcase.converter.CaseConverter.delimiter","title":"delimiter  <code>instance-attribute</code>","text":"<pre><code>delimiter = ''\n</code></pre> <p>The string used to join the transformed words together.</p> <p>Added in version: <code>0.2.0</code></p>"},{"location":"reference/converter/#textcase.converter.CaseConverter.convert","title":"convert","text":"<pre><code>convert(text)\n</code></pre> <p>Convert the given text to the specified case format.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>text</code> <p>The input string to be converted.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The input string converted to the specified case format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import textcase; CaseConverter().to_case(textcase.case.SNAKE).convert(\"myCatCali\")\n'my_cat_cali'\n</code></pre> Source code in <code>textcase/converter.py</code> <pre><code>def convert(self, text: str) -&gt; str:\n    \"\"\"Convert the given text to the specified case format.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        text: The input string to be converted.\n\n    Returns:\n        The input string converted to the specified case format.\n\n    Examples:\n        &gt;&gt;&gt; import textcase; CaseConverter().to_case(textcase.case.SNAKE).convert(\"myCatCali\")\n        'my_cat_cali'\n    \"\"\"\n    return self.delimiter.join(self.pattern(self.split(text)))\n</code></pre>"},{"location":"reference/converter/#textcase.converter.CaseConverter.split","title":"split","text":"<pre><code>split(text)\n</code></pre> <p>Split the input text into words based on the defined boundaries.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>text</code> <p>The input string to be split into words.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>List[str]</code> <p>A list of words extracted from the input text.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; CaseConverter().split(\"my_cat_cali\")\n['my', 'cat', 'cali']\n</code></pre> Source code in <code>textcase/converter.py</code> <pre><code>def split(self, text: str) -&gt; List[str]:\n    \"\"\"Split the input text into words based on the defined boundaries.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        text: The input string to be split into words.\n\n    Returns:\n        A list of words extracted from the input text.\n\n    Examples:\n        &gt;&gt;&gt; CaseConverter().split(\"my_cat_cali\")\n        ['my', 'cat', 'cali']\n    \"\"\"\n    return list(split(text, self.boundaries))\n</code></pre>"},{"location":"reference/converter/#textcase.converter.CaseConverter.to_case","title":"to_case","text":"<pre><code>to_case(case)\n</code></pre> <p>Set the case format to convert to.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>case</code> <p>The case format to convert the text to.</p> <p> TYPE: <code>Case</code> </p> RETURNS DESCRIPTION <code>CaseConverter</code> <p>The current instance of CaseConverter for method chaining.</p> Source code in <code>textcase/converter.py</code> <pre><code>def to_case(self, case: Case) -&gt; \"CaseConverter\":\n    \"\"\"Set the case format to convert to.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        case: The case format to convert the text to.\n\n    Returns:\n        The current instance of CaseConverter for method chaining.\n    \"\"\"\n    self.pattern = case.pattern\n    self.delimiter = case.delimiter\n    return self\n</code></pre>"},{"location":"reference/converter/#textcase.converter.CaseConverter.from_case","title":"from_case","text":"<pre><code>from_case(case)\n</code></pre> <p>Set the boundaries based on the specified case format.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>case</code> <p>The case format to derive boundaries from.</p> <p> TYPE: <code>Case</code> </p> RETURNS DESCRIPTION <code>CaseConverter</code> <p>The current instance of CaseConverter for method chaining.</p> Source code in <code>textcase/converter.py</code> <pre><code>def from_case(self, case: Case) -&gt; \"CaseConverter\":\n    \"\"\"Set the boundaries based on the specified case format.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        case: The case format to derive boundaries from.\n\n    Returns:\n        The current instance of CaseConverter for method chaining.\n    \"\"\"\n    self.boundaries = list(case.boundaries)\n    return self\n</code></pre>"},{"location":"reference/pattern/","title":"textcase.pattern","text":""},{"location":"reference/pattern/#textcase.pattern","title":"textcase.pattern","text":"<p>Text case transformation patterns.</p> <p>Added in version: <code>0.2.0</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tuple(lower((\"Hello\", \"World\")))\n('hello', 'world')\n</code></pre> <pre><code>&gt;&gt;&gt; tuple(upper((\"Hello\", \"World\")))\n('HELLO', 'WORLD')\n</code></pre> <pre><code>&gt;&gt;&gt; tuple(capital((\"hello\", \"world\")))\n('Hello', 'World')\n</code></pre> <pre><code>&gt;&gt;&gt; tuple(camel((\"hello\", \"world\")))\n('hello', 'World')\n</code></pre> <pre><code>&gt;&gt;&gt; tuple(sentence((\"hello\", \"world\")))\n('Hello', 'world')\n</code></pre>"},{"location":"reference/pattern/#textcase.pattern.lower","title":"lower","text":"<pre><code>lower(words)\n</code></pre> <p>Convert all words to lowercase.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>words</code> <p>An iterable of words to convert.</p> <p> TYPE: <code>Iterable[str]</code> </p> YIELDS DESCRIPTION <code>str</code> <p>An iterator of words in lowercase.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tuple(lower((\"Hello\", \"World\")))\n('hello', 'world')\n</code></pre> Source code in <code>textcase/pattern.py</code> <pre><code>def lower(words: Iterable[str]) -&gt; Iterator[str]:\n    \"\"\"Convert all words to lowercase.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        words: An iterable of words to convert.\n\n    Yields:\n        An iterator of words in lowercase.\n\n    Examples:\n        &gt;&gt;&gt; tuple(lower((\"Hello\", \"World\")))\n        ('hello', 'world')\n    \"\"\"\n    return (word.lower() for word in words)\n</code></pre>"},{"location":"reference/pattern/#textcase.pattern.upper","title":"upper","text":"<pre><code>upper(words)\n</code></pre> <p>Convert all words to uppercase.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>words</code> <p>An iterable of words to convert.</p> <p> TYPE: <code>Iterable[str]</code> </p> YIELDS DESCRIPTION <code>str</code> <p>An iterator of words in uppercase.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tuple(upper((\"Hello\", \"World\")))\n('HELLO', 'WORLD')\n</code></pre> Source code in <code>textcase/pattern.py</code> <pre><code>def upper(words: Iterable[str]) -&gt; Iterator[str]:\n    \"\"\"Convert all words to uppercase.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        words: An iterable of words to convert.\n\n    Yields:\n        An iterator of words in uppercase.\n\n    Examples:\n        &gt;&gt;&gt; tuple(upper((\"Hello\", \"World\")))\n        ('HELLO', 'WORLD')\n    \"\"\"\n    return (word.upper() for word in words)\n</code></pre>"},{"location":"reference/pattern/#textcase.pattern.capital","title":"capital","text":"<pre><code>capital(words)\n</code></pre> <p>Capitalize the first letter of each word and make the rest lowercase.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>words</code> <p>An iterable of words to convert.</p> <p> TYPE: <code>Iterable[str]</code> </p> YIELDS DESCRIPTION <code>str</code> <p>An iterator of words with the first letter capitalized.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tuple(capital((\"hello\", \"world\")))\n('Hello', 'World')\n</code></pre> Source code in <code>textcase/pattern.py</code> <pre><code>def capital(words: Iterable[str]) -&gt; Iterator[str]:\n    \"\"\"Capitalize the first letter of each word and make the rest lowercase.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        words: An iterable of words to convert.\n\n    Yields:\n        An iterator of words with the first letter capitalized.\n\n    Examples:\n        &gt;&gt;&gt; tuple(capital((\"hello\", \"world\")))\n        ('Hello', 'World')\n    \"\"\"\n    return (word.capitalize() for word in words)\n</code></pre>"},{"location":"reference/pattern/#textcase.pattern.camel","title":"camel","text":"<pre><code>camel(words)\n</code></pre> <p>Convert the first word to lowercase and capitalize the remaining words.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>words</code> <p>An iterable of words to convert.</p> <p> TYPE: <code>Iterable[str]</code> </p> YIELDS DESCRIPTION <code>str</code> <p>An iterator of words in camel case format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tuple(camel((\"hello\", \"world\")))\n('hello', 'World')\n</code></pre> Source code in <code>textcase/pattern.py</code> <pre><code>def camel(words: Iterable[str]) -&gt; Iterator[str]:\n    \"\"\"Convert the first word to lowercase and capitalize the remaining words.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        words: An iterable of words to convert.\n\n    Yields:\n        An iterator of words in camel case format.\n\n    Examples:\n        &gt;&gt;&gt; tuple(camel((\"hello\", \"world\")))\n        ('hello', 'World')\n    \"\"\"\n    words_iter = iter(words)\n    first_word = next(words_iter, \"\").lower()\n    return chain((first_word,), (word.capitalize() for word in words_iter))\n</code></pre>"},{"location":"reference/pattern/#textcase.pattern.sentence","title":"sentence","text":"<pre><code>sentence(words)\n</code></pre> <p>Capitalize the first word and make the remaining words lowercase.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>words</code> <p>An iterable of words to convert.</p> <p> TYPE: <code>Iterable[str]</code> </p> YIELDS DESCRIPTION <code>str</code> <p>An iterator of words in sentence case format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tuple(sentence((\"hello\", \"world\")))\n('Hello', 'world')\n</code></pre> Source code in <code>textcase/pattern.py</code> <pre><code>def sentence(words: Iterable[str]) -&gt; Iterator[str]:\n    \"\"\"Capitalize the first word and make the remaining words lowercase.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        words: An iterable of words to convert.\n\n    Yields:\n        An iterator of words in sentence case format.\n\n    Examples:\n        &gt;&gt;&gt; tuple(sentence((\"hello\", \"world\")))\n        ('Hello', 'world')\n    \"\"\"\n    words_iter = iter(words)\n    first_word = next(words_iter, \"\").capitalize()\n    return chain((first_word,), (word.lower() for word in words_iter))\n</code></pre>"},{"location":"reference/textcase/","title":"textcase","text":""},{"location":"reference/textcase/#textcase","title":"textcase","text":"<p>Text case conversion.</p> <p>Added in version: <code>0.1.0</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; convert(\"2020-04-16_my_cat_cali\", case.SNAKE)\n'2020_04_16_my_cat_cali'\n</code></pre> <pre><code>&gt;&gt;&gt; is_case(\"2020_04_16_my_cat_cali\", case.SNAKE)\nTrue\n</code></pre>"},{"location":"reference/textcase/#textcase.is_case","title":"is_case","text":"<pre><code>is_case(text, case)\n</code></pre> <p>Check if the given text matches the specified case format.</p> <p>This function compares the input text with its converted version based on the specified case format. It returns <code>True</code> if the text is already in the desired case format, and <code>False</code> otherwise.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>text</code> <p>The input string to be checked.</p> <p> TYPE: <code>str</code> </p> <code>case</code> <p>The case format to check against.</p> <p> TYPE: <code>Case</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if the text matches the specified case format, <code>False</code> otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_case(\"2020_04_16_my_cat_cali\", case.SNAKE)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; is_case(\"2020-04-16-my-cat-cali\", case.SNAKE)\nFalse\n</code></pre> Source code in <code>textcase/__init__.py</code> <pre><code>def is_case(text: str, case: case.Case) -&gt; bool:\n    \"\"\"Check if the given text matches the specified case format.\n\n    This function compares the input text with its converted version based on the specified\n    case format. It returns `True` if the text is already in the desired case format, and `False` otherwise.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        text: The input string to be checked.\n        case: The case format to check against.\n\n    Returns:\n        `True` if the text matches the specified case format, `False` otherwise.\n\n    Examples:\n        &gt;&gt;&gt; is_case(\"2020_04_16_my_cat_cali\", case.SNAKE)\n        True\n\n        &gt;&gt;&gt; is_case(\"2020-04-16-my-cat-cali\", case.SNAKE)\n        False\n    \"\"\"\n    return text == convert(text, case)\n</code></pre>"},{"location":"reference/textcase/#textcase.convert","title":"convert","text":"<pre><code>convert(text, case, boundaries=DEFAULT_BOUNDARIES)\n</code></pre> <p>Convert the given text to the specified case format.</p> <p>Added in version: <code>0.2.0</code></p> PARAMETER DESCRIPTION <code>text</code> <p>The input string to be converted.</p> <p> TYPE: <code>str</code> </p> <code>case</code> <p>The case format to convert the text to.</p> <p> TYPE: <code>Case</code> </p> <code>boundaries</code> <p>A collection of Boundary instances that define the split conditions.</p> <p> TYPE: <code>Iterable[Boundary]</code> DEFAULT: <code>DEFAULT_BOUNDARIES</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The input string converted to the specified case format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; convert(\"2020-04-16_my_cat_cali\", case.SNAKE)\n'2020_04_16_my_cat_cali'\n</code></pre> Source code in <code>textcase/__init__.py</code> <pre><code>def convert(text: str, case: case.Case, boundaries: Iterable[boundary.Boundary] = boundary.DEFAULT_BOUNDARIES) -&gt; str:\n    \"\"\"Convert the given text to the specified case format.\n\n    **Added in version:** [`0.2.0`](https://zobweyt.github.io/textcase/changelog/#020-2025-04-01)\n\n    Args:\n        text: The input string to be converted.\n        case: The case format to convert the text to.\n        boundaries: A collection of Boundary instances that define the split conditions.\n\n    Returns:\n        The input string converted to the specified case format.\n\n    Examples:\n        &gt;&gt;&gt; convert(\"2020-04-16_my_cat_cali\", case.SNAKE)\n        '2020_04_16_my_cat_cali'\n    \"\"\"\n    return case.delimiter.join(case.pattern(boundary.split(text, boundaries)))\n</code></pre>"},{"location":"ru/","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f","text":"textcase  <p>   \u041c\u043d\u043e\u0433\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 Python. </p> <p> </p>"},{"location":"ru/#_1","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u0432 \u0442\u0435\u043a\u0441\u0442\u0430: \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u043c\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, snake_case, kebab-case, camelCase \u0438 \u0442.\u0434.).</li> <li>\u041c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0434\u0438\u0437\u0430\u0439\u043d: \u043b\u0435\u0433\u043a\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0439\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u0432 \u0438 \u0433\u0440\u0430\u043d\u0438\u0446.</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0439: \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0451\u0442 \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 (\u043a\u0430\u043a \u0432 <code>HTTPRequest</code>).</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043d\u0435-ASCII: \u043b\u0435\u0433\u043a\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 \u043e\u0442 ASCII (\u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0432\u044b\u0432\u043e\u0434\u043e\u0432 \u043e \u044f\u0437\u044b\u043a\u0435 \u0432\u0432\u043e\u0434\u0430).</li> <li>100%-\u043d\u044b\u0439 \u043e\u0445\u0432\u0430\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c: \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u044b \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u044e\u0442 \u043d\u0430\u0434\u0451\u0436\u043d\u043e\u0441\u0442\u044c \u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c.</li> <li>\u0425\u043e\u0440\u043e\u0448\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f: \u0447\u0438\u0441\u0442\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f.</li> <li>\u0412\u044b\u0441\u043e\u043a\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c: \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439.</li> <li>\u041d\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439: \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0451 \u043b\u0451\u0433\u043a\u043e\u0439 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0439 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.</li> </ul>"},{"location":"ru/#_2","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"pip install textcase\u0413\u043e\u0442\u043e\u0432\u043e!"},{"location":"ru/#_3","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0440\u0435\u0433\u0438\u0441\u0442\u0440, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>convert</code>:</p> main.pyoutput.txt <pre><code>from textcase import case, convert\n\nprint(convert(\"ronnie james dio\", case.SNAKE))\nprint(convert(\"Ronnie_James_dio\", case.CONSTANT))\nprint(convert(\"RONNIE_JAMES_DIO\", case.KEBAB))\nprint(convert(\"ronnie james dio\", case.MIDDOT))\nprint(convert(\"RONNIE-JAMES-DIO\", case.CAMEL))\nprint(convert(\"ronnie-james-dio\", case.PASCAL))\nprint(convert(\"RONNIE JAMES DIO\", case.LOWER))\nprint(convert(\"ronnie james dio\", case.UPPER))\nprint(convert(\"ronnie-james-dio\", case.TITLE))\nprint(convert(\"ronnie james dio\", case.SENTENCE))\n</code></pre> <pre><code>ronnie_james_dio\nRONNIE_JAMES_DIO\nronnie-james-dio\nronnie\u00b7james\u00b7dio\nronnieJamesDio\nRonnieJamesDio\nronnie james dio\nRONNIE JAMES DIO\nRonnie James Dio\nRonnie james dio\n</code></pre> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>convert</code> \u0438 <code>CaseConverter.convert</code> \u0431\u0443\u0434\u0443\u0442 \u0434\u0435\u043b\u0438\u0442\u044c \u0441\u043b\u043e\u0432\u0430 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u0441\u043b\u043e\u0432, \u0442\u043e \u0435\u0441\u0442\u044c:</p> <ul> <li>\u041f\u043e\u0434\u0447\u0451\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u044f: <code>_</code>,</li> <li>\u0414\u0435\u0444\u0438\u0441\u044b: <code>-</code>,</li> <li>\u041f\u0440\u043e\u0431\u0435\u043b\u044b: <code></code>,</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u0431\u0443\u043a\u0432 \u0441\u043e \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043d\u0430 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b: <code>aA</code>,</li> <li>\u0421\u043e\u0441\u0435\u0434\u043d\u0438\u0435 \u0446\u0438\u0444\u0440\u044b \u0438 \u0431\u0443\u043a\u0432\u044b: <code>a1</code>, <code>1a</code>, <code>A1</code>, <code>1A</code>,</li> <li>\u0410\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f: <code>AAa</code> (\u043a\u0430\u043a \u0432 <code>HTTPRequest</code>).</li> </ul> <p>\u0414\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u0445 \u0441\u043b\u043e\u0432 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f:</p> main.pyoutput.txt <pre><code>from textcase import boundary, case, convert\n\nprint(convert(\"2020-04-16_my_cat_cali\", case.TITLE))\nprint(convert(\"2020-04-16_my_cat_cali\", case.TITLE, (boundary.UNDERSCORE,)))\n</code></pre> <pre><code>2020 04 16 My Cat Cali\n2020-04-16 My Cat Cali\n</code></pre> <p>\u042d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u0442\u044c \u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u0442\u0435\u043c, \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 camel. \u041e\u043d\u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442 \u043b\u044e\u0431\u044b\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435, \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0438\u043b\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438:</p> main.pyoutput.txt <pre><code>from textcase import case, convert\n\nprint(convert(\"IOStream\", case.SNAKE))\nprint(convert(\"myJSONParser\", case.SNAKE))\nprint(convert(\"__weird--var _name-\", case.SNAKE))\n</code></pre> <pre><code>io_stream\nmy_json_parser\nweird_var_name\n</code></pre> <p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 \u043e\u0442 ASCII. \u041e\u0434\u043d\u0430\u043a\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0432\u044b\u0432\u043e\u0434\u043e\u0432 \u043e \u044f\u0437\u044b\u043a\u0435 \u0432\u0432\u043e\u0434\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0433\u043e\u043b\u043b\u0430\u043d\u0434\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u043e\u0440\u0433\u0440\u0430\u0444 \"ij\" \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0434\u0432\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 Unicode \u0438 \u043d\u0435 \u043f\u0438\u0448\u0435\u0442\u0441\u044f \u0441 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b. \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u044d\u0442\u043e\u0433\u043e, \u0441\u0438\u043c\u0432\u043e\u043b \"\u00e6\" \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0441 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0431\u0443\u043a\u0432\u044b, \u043a\u0430\u043a \u0438 \u043e\u0436\u0438\u0434\u0430\u043b\u043e\u0441\u044c. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0432 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0442\u0435\u043a\u0441\u0442 \"I THINK I DO\" \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d \u0432 \"i think i do\", \u0430 \u043d\u0435 \u0432 \"I think I do\". \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b:</p> main.pyoutput.txt <pre><code>from textcase import case, convert\n\nprint(convert(\"Granat\u00c4pfel\", case.KEBAB))\nprint(convert(\"\u041f\u0415\u0420\u0421\u041f\u0415\u041a\u0422\u0418\u0412\u041024\", case.TITLE))\nprint(convert(\"\u1f48\u0394\u03a5\u03a3\u03a3\u0395\u038e\u03a3\", case.LOWER))\n</code></pre> <pre><code>granat-\u00e4pfel\n\u041f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u0430 24\n\u1f40\u03b4\u03c5\u03c3\u03c3\u03b5\u03cd\u03c2\n</code></pre> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u0446\u0438\u0444\u0440\u044b, \u0438 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442, \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 \u0441\u043b\u043e\u0432. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043b\u044e\u0431\u044b\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b ASCII (\u043a\u0440\u043e\u043c\u0435 <code>_</code> \u0438 <code>-</code>) \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f:</p> main.pyoutput.txt <pre><code>from textcase import case, convert\n\nprint(repr(convert(\"E5150\", case.SNAKE)))\nprint(repr(convert(\"10,000Days\", case.SNAKE)))\nprint(repr(convert(\"Hello, world!\", case.UPPER)))\nprint(repr(convert(\"ONE\\nTWO\\nTHREE\", case.TITLE)))\n</code></pre> <pre><code>'e_5150'\n'10,000_days'\n'HELLO, WORLD!'\n'One\\ntwo\\nthree'\n</code></pre> <p>\u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0432 \u043a\u0430\u043a\u043e\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430:</p> main.pyoutput.txt <pre><code>from textcase import case, is_case\n\nprint(is_case(\"css-class-name\", case.KEBAB))\nprint(is_case(\"css-class-name\", case.SNAKE))\nprint(is_case(\"UPPER_CASE_VAR\", case.SNAKE))\n</code></pre> <pre><code>True\nFalse\nFalse\n</code></pre>"},{"location":"ru/learn/boundaries/","title":"\u0413\u0440\u0430\u043d\u0438\u0446\u044b","text":""},{"location":"ru/learn/boundaries/#_2","title":"\u0421\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u0433\u0440\u0430\u043d\u0438\u0446","text":"<p>\u0411\u044b\u0432\u0430\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u0441\u043b\u043e\u0432\u0430. \u0412\u043e\u0442 \u043f\u043e\u0447\u0435\u043c\u0443 <code>convert</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0433\u0440\u0430\u043d\u0438\u0446 \u0441\u043b\u043e\u0432 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043d\u043e \u0438\u043d\u043e\u0433\u0434\u0430 \u044d\u0442\u043e\u0433\u043e \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043b\u044f \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f.</p> <p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u043e\u0432\u043e <code>2D</code>, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 <code>scale2D</code>. \u041d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f <code>convert</code> \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u043a\u0430\u043a\u0438\u043c \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443. \u042d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u043e\u0441\u0442\u0438. \u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u043a\u0430\u043a\u0438\u043c \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0440\u0430\u0437\u0431\u0438\u0442\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430 <code>Boundary</code>:</p> specificity.pyoutput.txt <pre><code>from textcase import boundary, case, convert\n\n# Not quite what we want\nprint(convert(\"scale2D\", case.SNAKE, case.CAMEL.boundaries))\n\n# Write boundaries explicitly\nprint(convert(\"scale2D\", case.SNAKE, (boundary.LOWER_DIGIT,)))\n</code></pre> <pre><code>scale_2_d\nscale_2d\n</code></pre>"},{"location":"ru/learn/boundaries/#_3","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b","text":"<p>\u042d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u044f\u0434 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0434\u043b\u044f \u0433\u0440\u0430\u043d\u0438\u0446, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u0431\u0449\u0438\u043c\u0438 \u0441\u043b\u0443\u0447\u0430\u044f\u043c\u0438. \u041d\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u044e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u043f\u043e \u0434\u0440\u0443\u0433\u0438\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c:</p> custom.pyoutput.txt <pre><code>from textcase import case, convert\nfrom textcase.boundary import Boundary\n\n# Not quite what we want\nprint(convert(\"coolers.revenge\", case.TITLE))\n\n# Use custom boundary\nprint(convert(\"coolers.revenge\", case.TITLE, (Boundary.from_delimiter(\".\"),)))\n\n# Define complex custom boundary\nAT_LETTER = Boundary(\n    satisfies=lambda text: (len(text) &gt; 1 and text[0] == \"@\") and (text[1] == text[1].lower()),\n    start=1,\n    length=0,\n)\n\nprint(convert(\"name@domain\", case.TITLE, (AT_LETTER,)))\n</code></pre> <pre><code>Coolers.revenge\nCoolers Revenge\nName@ Domain\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u043d\u0443\u043b\u044f, \u0432\u0437\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u043d\u0430 \u043a\u043b\u0430\u0441\u0441 textcase.boundary.Boundary.</p>"},{"location":"ru/learn/cases/","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u044b","text":""},{"location":"ru/learn/cases/#_2","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044b","text":"<p>\u041f\u043e\u0434\u043e\u0431\u043d\u043e <code>Boundary</code>, \u0435\u0441\u0442\u044c <code>Case</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0440\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0435\u0434\u0435\u0442 \u0441\u0435\u0431\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 <code>convert</code> \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445:</p> custom_convert.pyoutput.txt <pre><code>from textcase import convert\nfrom textcase.boundary import Boundary\nfrom textcase.case import Case\nfrom textcase.pattern import lower\n\n# Define custom boundary\nDOT = Boundary(\n    satisfies=lambda text: text.startswith(\".\"),\n    length=1,\n)\n\n# Define custom case\nDOT_CASE = Case(\n    boundaries=(DOT,),\n    pattern=lower,\n    delimiter=\".\",\n)\n\nprint(convert(\"Dot case var\", DOT_CASE))\n</code></pre> <pre><code>dot.case.var\n</code></pre> <p>\u0418 \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438 \u0433\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u044d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e <code>textcase.is_case</code> \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0435\u0441\u0442\u0438 \u0441\u0435\u0431\u044f \u0442\u0430\u043a, \u043a\u0430\u043a \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f:</p> custom_is_case.pyoutput.txt <pre><code>from textcase import is_case\nfrom textcase.boundary import Boundary\nfrom textcase.case import Case\nfrom textcase.pattern import lower\n\n# Define custom boundary\nDOT = Boundary(\n    satisfies=lambda text: text.startswith(\".\"),\n    length=1,\n)\n\n# Define custom case\nDOT_CASE = Case(\n    boundaries=(DOT,),\n    pattern=lower,\n    delimiter=\".\",\n)\n\nprint(is_case(\"dot.case.var\", DOT_CASE))\nprint(is_case(\"Dot case var\", DOT_CASE))\n</code></pre> <pre><code>True\nFalse\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u0441 \u043d\u0443\u043b\u044f, \u0432\u0437\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u043d\u0430 \u043a\u043b\u0430\u0441\u0441 textcase.case.Case.</p>"},{"location":"ru/learn/converter/","title":"\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0435\u0440","text":""},{"location":"ru/learn/converter/#_2","title":"\u041a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430","text":"<p>\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438. \u041f\u0435\u0440\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0430 \u0440\u044f\u0434 \u0441\u043b\u043e\u0432, \u0430 \u0432\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0441\u043b\u043e\u0432\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u043e. \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0448\u0430\u0433\u043e\u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0439 <code>CaseConverter.from_case</code> \u0438 <code>CaseConverter.to_case</code> \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.</p> <p><code>CaseConverter</code> \u2014 \u044d\u0442\u043e \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u0438\u0440\u0443\u0435\u0442 \u0433\u0440\u0430\u043d\u0438\u0446\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0430\u0431\u043b\u043e\u043d \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u043c\u0443\u0442\u0430\u0446\u0438\u0438 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f. \u041c\u0435\u0442\u043e\u0434 <code>CaseConverter.convert</code> \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442 \u0433\u0440\u0430\u043d\u0438\u0446\u044b, \u0448\u0430\u0431\u043b\u043e\u043d \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430:</p> converter.pyoutput.txt <pre><code>from textcase import CaseConverter, case, pattern\n\nconverter = CaseConverter()\nconverter.pattern = pattern.camel\nconverter.delimiter = \"_\"\n\nprint(converter.convert(\"My Special Case\"))\n\nconverter.from_case(case.CAMEL)\nconverter.to_case(case.SNAKE)\n\nprint(converter.convert(\"mySpecialCase\"))\n</code></pre> <pre><code>my_Special_Case\nmy_special_case\n</code></pre> <p>\u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043c. \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u043e textcase.converter.CaseConverter.</p>"}]}