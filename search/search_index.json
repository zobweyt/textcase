{"config":{"lang":["en","ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"textcase  <p>   Python library for text case conversions. </p> <p> </p>"},{"location":"#features","title":"Features","text":"<ul> <li> Text case conversion: convert strings between various text cases (e.g., snake_case, kebab-case, camelCase, etc.).</li> <li> Extensible: extend the library with custom word boundaries and cases.</li> <li> Accurate: handles any word boundaries in strings including acronyms (as in <code>\"HTTPRequest\"</code>).</li> <li> Non-ASCII Support: handles non-ASCII characters seamlessly (no inferences on the input language itself is made).</li> <li> Tiny, Performant &amp; Zero Dependencies: a regex-free, efficient library that stays lightweight with no external dependencies.</li> <li> 100% test coverage: every line of code is rigorously tested for reliability.</li> <li> 100% type annotated codebase: full type annotations for best developer experience.</li> </ul>"},{"location":"#installation","title":"Installation","text":"pip install textcaseDone!"},{"location":"#usage","title":"Usage","text":"<p>Convert a string to a text case:</p> cases.py<pre><code>import textcase\n\ntextcase.snake(\"Hello, world!\")  # hello_world\ntextcase.constant(\"Hello, world!\")  # HELLO_WORLD\ntextcase.kebab(\"Hello, world!\")  # hello-world\ntextcase.middot(\"Hello, world!\")  # hello\u00b7world\ntextcase.camel(\"Hello, world!\")  # helloWorld\ntextcase.pascal(\"Hello, world!\")  # HelloWorld\ntextcase.lower(\"Hello, world!\")  # hello world\ntextcase.upper(\"Hello, world!\")  # HELLO WORLD\ntextcase.title(\"Hello, world!\")  # Hello World\ntextcase.sentence(\"Hello, world!\")  # Hello world\n</code></pre> <p>You can also test what case a string is in:</p> match.py<pre><code>import textcase\n\ntextcase.kebab.match(\"css-class-name\")  # True\ntextcase.snake.match(\"css-class-name\")  # False\ntextcase.snake.match(\"CSS_CLASS_NAME\")  # False\n</code></pre>"},{"location":"#boundaries","title":"Boundaries","text":"<p>By default, the library will words split along a set of default word boundaries, that is:</p> <ul> <li>Underscores: <code>\"_\"</code>,</li> <li>Hyphens: <code>\"-\"</code>,</li> <li>Spaces: <code>\" \"</code>,</li> <li>Interpuncts: <code>\"\u00b7\"</code>,</li> <li>Changes in capitalization from lowercase to uppercase: <code>\"aA\"</code>,</li> <li>Adjacent digits and letters: <code>\"a1\"</code>, <code>\"1a\"</code>, <code>\"A1\"</code>, <code>\"1A\"</code>,</li> <li>Acronyms: <code>\"AAa\"</code> (as in <code>\"HTTPRequest\"</code>).</li> </ul> <p>You can learn more about boundaries here.</p>"},{"location":"#precision","title":"Precision","text":"<p>For more precision, you can specify boundaries to split based on the word boundaries of a particular case. For example, you can explicitly specify which boundaries will be used:</p> precision.py<pre><code>import textcase\n\ntextcase.title(\"27-07_my_cat\")  # 27 07 My Cat\ntextcase.title(\"27-07_my_cat\", boundaries=[textcase.UNDERSCORE], strip_punctuation=False)  # 27-07 My Cat\n</code></pre> <p>This library can detect acronyms in camel-like strings. It also ignores any leading, trailing, or duplicate delimiters:</p> acronyms.py<pre><code>import textcase\n\ntextcase.snake(\"IOStream\")  # io_stream\ntextcase.snake(\"myJSONParser\")  # my_json_parser\ntextcase.snake(\"__weird--var _name-\")  # weird_var_name\n</code></pre>"},{"location":"#non-ascii-characters","title":"Non-ASCII Characters","text":"<p>The library also supports non-ASCII characters. However, no inferences on the input language itself is made. For example, in Dutch, the digraph <code>\"ij\"</code> is treated as two separate Unicode characters and will not be capitalized. In contrast, the character <code>\"\u00e6\"</code> will be capitalized as expected. Also, in English the text <code>\"I THINK I DO\"</code> will be converted to <code>\"i think i do\"</code>, not <code>\"I think I do\"</code>. This means that the library can handle various characters:</p> non_ascii.py<pre><code>import textcase\n\ntextcase.kebab(\"Granat\u00c4pfel\")  # granat-\u00e4pfel\ntextcase.title(\"\u041f\u0415\u0420\u0421\u041f\u0415\u041a\u0422\u0418\u0412\u041024\")  # \u041f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u0430 24\ntextcase.lower(\"\u1f48\u0394\u03a5\u03a3\u03a3\u0395\u038e\u03a3\")  # \u1f40\u03b4\u03c5\u03c3\u03c3\u03b5\u03cd\u03c2\n</code></pre>"},{"location":"#punctuation","title":"Punctuation","text":"<p>By default, characters followed by digits and vice-versa are considered word boundaries. In addition, punctuation characters are stripped (excluding current case <code>delimiter</code>) and other special characters are ignored. You can control this behavior using the <code>strip_punctuation</code> argument:</p> punctuation.py<pre><code>import textcase\n\ntextcase.snake(\"E5150\")  # e_5150\ntextcase.title(\"ONE\\nTWO\")  # One\\ntwo\ntextcase.snake(\"10,000Days\")  # 10000_days\n\ntextcase.upper(\"Hello, world!\")  # HELLO WORLD\ntextcase.upper(\"Hello, world!\", strip_punctuation=False)  # HELLO, WORLD!\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#043-2025-04-18","title":"0.4.3 (2025-04-18)","text":"<p>Update <code>Boundary.from_delimiter</code> to use full delimiter length.</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>update <code>Boundary.from_delimiter</code> to use full delimiter length (<code>6b95985</code>)</li> </ul>"},{"location":"changelog/#042-2025-04-18","title":"0.4.2 (2025-04-18)","text":"<p>Text case conversion strip punctuation fixes and improved edge case handling in tests.</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>correctly strip leading and trailing punctuation (<code>1db6a93</code>)</li> </ul>"},{"location":"changelog/#refactoring","title":"Refactoring","text":"<ul> <li>simplify boundary creation in custom boundary tests (<code>fb85ca7</code>)</li> </ul>"},{"location":"changelog/#testing","title":"Testing","text":"<ul> <li>update precision tests (<code>b8f1e79</code>)</li> <li>handle more edge cases (<code>aab332d</code>)</li> </ul>"},{"location":"changelog/#041-2025-04-15","title":"0.4.1 (2025-04-15)","text":"<p>Performance and documentation enhancements.</p>"},{"location":"changelog/#performance","title":"Performance","text":"<ul> <li>optimize build (<code>a79cb84</code>)</li> </ul>"},{"location":"changelog/#040-2025-04-14","title":"0.4.0 (2025-04-14)","text":"<p>Rewrite.</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>rewrite (<code>4816c0e</code>)</li> </ul>"},{"location":"changelog/#performance_1","title":"Performance","text":"<ul> <li>optimize <code>pattern.camel</code> and <code>pattern.sentence</code> (<code>a5d1731</code>)</li> </ul>"},{"location":"changelog/#031-2025-04-13","title":"0.3.1 (2025-04-13)","text":"<p>Adds <code>py.typed</code> file.</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>add <code>py.typed</code> file (<code>a2611af</code>)</li> </ul>"},{"location":"changelog/#030-2025-04-13","title":"0.3.0 (2025-04-13)","text":"<p>Simplification of custom <code>Boundary</code> creation from a delimiter, and addition of the new <code>MIDDOT</code> case.</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>add <code>Boundary.from_delimiter</code> (#10) (<code>ff46f04</code>)</li> <li>add <code>INTERPUNCT</code> boundary and <code>MIDDOT</code> case (#11) (<code>8cf450b</code>)</li> </ul>"},{"location":"changelog/#023-2025-04-13","title":"0.2.3 (2025-04-13)","text":"<p>Acronym identification fixes.</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>update ACRONYM to correctly identify acronym boundaries (<code>dd604b0</code>)</li> </ul>"},{"location":"changelog/#022-2025-04-12","title":"0.2.2 (2025-04-12)","text":"<p>Performance and documentation enhancements.</p>"},{"location":"changelog/#performance_2","title":"Performance","text":"<ul> <li>optimize boundary conditions (<code>27cbbb2</code>)</li> </ul>"},{"location":"changelog/#021-2025-04-02","title":"0.2.1 (2025-04-02)","text":"<p>Expands test coverage with new tests for edge cases and conversions.</p>"},{"location":"changelog/#testing_1","title":"Testing","text":"<ul> <li>add boundary custom tests (<code>5602ed0</code>)</li> <li>add case custom tests (<code>b26a3c1</code>)</li> <li>add converter complex test (<code>4b1f3a9</code>)</li> <li>add is_case tests (<code>8f9b2d3</code>)</li> <li>add convert cases tests (<code>4b5c110</code>)</li> <li>add convert acronyms tests (<code>cc3cdcc</code>)</li> <li>add convert non ascii tests (<code>c4fdd55</code>)</li> <li>add case precision tests (<code>6055e41</code>)</li> <li>add test special tests (<code>ad2a3ec</code>)</li> <li>add pattern tests (<code>e03f54e</code>)</li> </ul>"},{"location":"changelog/#020-2025-04-01","title":"0.2.0 (2025-04-01)","text":"<p>Adds initial functionality for text case conversion, with extensibility possible.</p>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>use final for case constants (<code>5228e8d</code>)</li> <li>use lower instead of upper for LOWER case (<code>cce6ed7</code>)</li> </ul>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>add text case transformation patterns (<code>b003fac</code>)</li> <li>add conditions for splitting an identifier into words (<code>fb76228</code>)</li> <li>add case definitions for text transformation (<code>cf32822</code>)</li> <li>add text case conversion between different case formats (<code>a11044d</code>)</li> <li>add utils (<code>1f86e1a</code>)</li> <li>add boundaries to convert function (<code>0b9ea8a</code>)</li> <li>add initial functionality (#1) (<code>3073ae6</code>)</li> </ul>"},{"location":"changelog/#testing_2","title":"Testing","text":"<ul> <li>include doctests in pytest (<code>699c5a6</code>)</li> <li>ignore testmod (<code>04f6862</code>)</li> <li>add converter tests (<code>d045a97</code>)</li> </ul>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>use python &gt;=3.9 (<code>a30d61c</code>)</li> </ul>"},{"location":"changelog/#010-2025-03-31","title":"0.1.0 (2025-03-31)","text":"<p>Initial release.</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>init (<code>22ec6ca</code>)</li> </ul>"},{"location":"changelog/#new-contributors","title":"New Contributors","text":"<ul> <li>@zobweyt made their first contribution</li> </ul>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#textcase","title":"textcase","text":"<p>Text case conversion.</p>"},{"location":"reference/#textcase.UNDERSCORE","title":"UNDERSCORE  <code>module-attribute</code>","text":"<pre><code>UNDERSCORE = Boundary.from_delimiter('_')\n</code></pre> <p>Splits on underscore, consuming the character on segmentation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; UNDERSCORE.match(\"_\")\nTrue\n\n&gt;&gt;&gt; UNDERSCORE.match(\"_brown\")\nTrue\n\n&gt;&gt;&gt; UNDERSCORE.match(\".brown\")\nFalse\n\n&gt;&gt;&gt; UNDERSCORE.start\n0\n\n&gt;&gt;&gt; UNDERSCORE.length\n1\n</code></pre>"},{"location":"reference/#textcase.HYPHEN","title":"HYPHEN  <code>module-attribute</code>","text":"<pre><code>HYPHEN = Boundary.from_delimiter('-')\n</code></pre> <p>Splits on hyphen, consuming the character on segmentation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; HYPHEN.match(\"-\")\nTrue\n\n&gt;&gt;&gt; HYPHEN.match(\"-brown\")\nTrue\n\n&gt;&gt;&gt; HYPHEN.match(\".brown\")\nFalse\n\n&gt;&gt;&gt; HYPHEN.start\n0\n\n&gt;&gt;&gt; HYPHEN.length\n1\n</code></pre>"},{"location":"reference/#textcase.SPACE","title":"SPACE  <code>module-attribute</code>","text":"<pre><code>SPACE = Boundary.from_delimiter(' ')\n</code></pre> <p>Splits on space, consuming the character on segmentation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SPACE.match(\" \")\nTrue\n\n&gt;&gt;&gt; SPACE.match(\" brown\")\nTrue\n\n&gt;&gt;&gt; SPACE.match(\".brown\")\nFalse\n\n&gt;&gt;&gt; SPACE.start\n0\n\n&gt;&gt;&gt; SPACE.length\n1\n</code></pre>"},{"location":"reference/#textcase.INTERPUNCT","title":"INTERPUNCT  <code>module-attribute</code>","text":"<pre><code>INTERPUNCT = Boundary.from_delimiter('\u00b7')\n</code></pre> <p>Splits on interpunct, consuming the character on segmentation.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; INTERPUNCT.match(\"\u00b7\")\nTrue\n\n&gt;&gt;&gt; INTERPUNCT.match(\"\u00b7brown\")\nTrue\n\n&gt;&gt;&gt; INTERPUNCT.match(\".brown\")\nFalse\n\n&gt;&gt;&gt; INTERPUNCT.start\n0\n\n&gt;&gt;&gt; INTERPUNCT.length\n1\n</code></pre>"},{"location":"reference/#textcase.LOWER_UPPER","title":"LOWER_UPPER  <code>module-attribute</code>","text":"<pre><code>LOWER_UPPER = Boundary(match=lambda s: s[:1].islower() and s[1:2].isupper(), start=1)\n</code></pre> <p>Splits where a lowercase letter is followed by an uppercase letter.</p> <p>This is seldom used, and is not included in the default boundaries.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; LOWER_UPPER.match(\"aA\")\nTrue\n\n&gt;&gt;&gt; LOWER_UPPER.match(\"Aa\")\nFalse\n\n&gt;&gt;&gt; LOWER_UPPER.start\n1\n\n&gt;&gt;&gt; LOWER_UPPER.length\n0\n</code></pre>"},{"location":"reference/#textcase.UPPER_LOWER","title":"UPPER_LOWER  <code>module-attribute</code>","text":"<pre><code>UPPER_LOWER = Boundary(match=lambda s: s[:1].isupper() and s[1:2].islower(), start=1)\n</code></pre> <p>Splits where an uppercase letter is followed by a lowercase letter.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; UPPER_LOWER.match(\"Aa\")\nTrue\n\n&gt;&gt;&gt; UPPER_LOWER.match(\"aA\")\nFalse\n\n&gt;&gt;&gt; UPPER_LOWER.start\n1\n\n&gt;&gt;&gt; UPPER_LOWER.length\n0\n</code></pre>"},{"location":"reference/#textcase.ACRONYM","title":"ACRONYM  <code>module-attribute</code>","text":"<pre><code>ACRONYM = Boundary(match=lambda s: s[:1].isupper() and s[1:2].isupper() and s[2:3].islower(), start=1)\n</code></pre> <p>Acronyms are identified by two uppercase letters followed by a lowercase letter.</p> <p>The word boundary is between the two uppercase letters. For example, \"HTTPRequest\" would have an acronym boundary identified at \"PRe\" and split into \"HTTP\" and \"Request\".</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ACRONYM.match(\"AAa\")\nTrue\n\n&gt;&gt;&gt; ACRONYM.match(\"1Aa\")\nFalse\n\n&gt;&gt;&gt; ACRONYM.match(\"AAA\")\nFalse\n\n&gt;&gt;&gt; ACRONYM.start\n1\n\n&gt;&gt;&gt; ACRONYM.length\n0\n</code></pre>"},{"location":"reference/#textcase.LOWER_DIGIT","title":"LOWER_DIGIT  <code>module-attribute</code>","text":"<pre><code>LOWER_DIGIT = Boundary(match=lambda s: s[:1].islower() and s[1:2].isdigit(), start=1)\n</code></pre> <p>Splits where a lowercase letter is followed by a digit.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; LOWER_DIGIT.match(\"a1\")\nTrue\n\n&gt;&gt;&gt; LOWER_DIGIT.match(\"1a\")\nFalse\n\n&gt;&gt;&gt; LOWER_DIGIT.start\n1\n\n&gt;&gt;&gt; LOWER_DIGIT.length\n0\n</code></pre>"},{"location":"reference/#textcase.UPPER_DIGIT","title":"UPPER_DIGIT  <code>module-attribute</code>","text":"<pre><code>UPPER_DIGIT = Boundary(match=lambda s: s[:1].isupper() and s[1:2].isdigit(), start=1)\n</code></pre> <p>Splits where an uppercase letter is followed by a digit.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; UPPER_DIGIT.match(\"A1\")\nTrue\n\n&gt;&gt;&gt; UPPER_DIGIT.match(\"1A\")\nFalse\n\n&gt;&gt;&gt; UPPER_DIGIT.start\n1\n\n&gt;&gt;&gt; UPPER_DIGIT.length\n0\n</code></pre>"},{"location":"reference/#textcase.DIGIT_LOWER","title":"DIGIT_LOWER  <code>module-attribute</code>","text":"<pre><code>DIGIT_LOWER = Boundary(match=lambda s: s[:1].isdigit() and s[1:2].islower(), start=1)\n</code></pre> <p>Splits where digit is followed by a lowercase letter.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DIGIT_LOWER.match(\"1a\")\nTrue\n\n&gt;&gt;&gt; DIGIT_LOWER.match(\"1A\")\nFalse\n\n&gt;&gt;&gt; DIGIT_LOWER.start\n1\n\n&gt;&gt;&gt; DIGIT_LOWER.length\n0\n</code></pre>"},{"location":"reference/#textcase.DIGIT_UPPER","title":"DIGIT_UPPER  <code>module-attribute</code>","text":"<pre><code>DIGIT_UPPER = Boundary(match=lambda s: s[:1].isdigit() and s[1:2].isupper(), start=1)\n</code></pre> <p>Splits where digit is followed by an uppercase letter.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DIGIT_UPPER.match(\"1A\")\nTrue\n\n&gt;&gt;&gt; DIGIT_UPPER.match(\"1a\")\nFalse\n\n&gt;&gt;&gt; DIGIT_UPPER.start\n1\n\n&gt;&gt;&gt; DIGIT_UPPER.length\n0\n</code></pre>"},{"location":"reference/#textcase.snake","title":"snake  <code>module-attribute</code>","text":"<pre><code>snake = Case(delimiter='_', transform=lambda words: map(str.lower, words))\n</code></pre> <p>Snake case strings are delimited by underscores and are all lowercase.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; snake(\"Hello, world!\")\n'hello_world'\n\n&gt;&gt;&gt; snake.match(\"hello_world\")\nTrue\n\n&gt;&gt;&gt; snake.match(\"Hello, world!\")\nFalse\n</code></pre>"},{"location":"reference/#textcase.constant","title":"constant  <code>module-attribute</code>","text":"<pre><code>constant = Case(delimiter='_', transform=lambda words: map(str.upper, words))\n</code></pre> <p>Constant case strings are delimited by underscores and are all uppercase.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; constant(\"Hello, world!\")\n'HELLO_WORLD'\n\n&gt;&gt;&gt; constant.match(\"HELLO_WORLD\")\nTrue\n\n&gt;&gt;&gt; constant.match(\"Hello, world!\")\nFalse\n</code></pre>"},{"location":"reference/#textcase.kebab","title":"kebab  <code>module-attribute</code>","text":"<pre><code>kebab = Case(delimiter='-', transform=lambda words: map(str.lower, words))\n</code></pre> <p>Kebab case strings are delimited by hyphens and are all lowercase.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; kebab(\"Hello, world!\")\n'hello-world'\n\n&gt;&gt;&gt; kebab.match(\"hello-world\")\nTrue\n\n&gt;&gt;&gt; kebab.match(\"Hello, world!\")\nFalse\n</code></pre>"},{"location":"reference/#textcase.middot","title":"middot  <code>module-attribute</code>","text":"<pre><code>middot = Case(delimiter='\u00b7', transform=lambda words: map(str.lower, words))\n</code></pre> <p>Middot case strings are delimited by interpuncts and are all lowercase.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; middot(\"Hello, world!\")\n'hello\u00b7world'\n\n&gt;&gt;&gt; middot.match(\"hello\u00b7world\")\nTrue\n\n&gt;&gt;&gt; middot.match(\"Hello, world!\")\nFalse\n</code></pre>"},{"location":"reference/#textcase.camel","title":"camel  <code>module-attribute</code>","text":"<pre><code>camel = Case(transform=lambda words: word.lower() if i == 0 else word.capitalize() for (i, word) in enumerate(words))\n</code></pre> <p>Camel case strings are lowercase, but for every word except the first the first letter is capitalized.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; camel(\"Hello, world!\")\n'helloWorld'\n\n&gt;&gt;&gt; camel.match(\"helloWorld\")\nTrue\n\n&gt;&gt;&gt; camel.match(\"Hello, world!\")\nFalse\n</code></pre>"},{"location":"reference/#textcase.pascal","title":"pascal  <code>module-attribute</code>","text":"<pre><code>pascal = Case(transform=lambda words: map(str.capitalize, words))\n</code></pre> <p>Pascal case strings are lowercase, but for every word the first letter is capitalized.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; pascal(\"Hello, world!\")\n'HelloWorld'\n\n&gt;&gt;&gt; pascal.match(\"HelloWorld\")\nTrue\n\n&gt;&gt;&gt; pascal.match(\"Hello, world!\")\nFalse\n</code></pre>"},{"location":"reference/#textcase.lower","title":"lower  <code>module-attribute</code>","text":"<pre><code>lower = Case(delimiter=' ', transform=lambda words: map(str.lower, words))\n</code></pre> <p>Lowercase strings are delimited by spaces and all characters are lowercase.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lower(\"Hello, world!\")\n'hello world'\n\n&gt;&gt;&gt; lower.match(\"hello world\")\nTrue\n\n&gt;&gt;&gt; lower.match(\"Hello, world!\")\nFalse\n</code></pre>"},{"location":"reference/#textcase.upper","title":"upper  <code>module-attribute</code>","text":"<pre><code>upper = Case(delimiter=' ', transform=lambda words: map(str.upper, words))\n</code></pre> <p>Uppercase strings are delimited by spaces and all characters are uppercase.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; upper(\"Hello, world!\")\n'HELLO WORLD'\n\n&gt;&gt;&gt; upper.match(\"HELLO WORLD\")\nTrue\n\n&gt;&gt;&gt; upper.match(\"Hello, world!\")\nFalse\n</code></pre>"},{"location":"reference/#textcase.title","title":"title  <code>module-attribute</code>","text":"<pre><code>title = Case(delimiter=' ', transform=lambda words: map(str.capitalize, words))\n</code></pre> <p>Title case strings are delimited by spaces. Only the leading character of each word is uppercase.</p> <p>No inferences are made about language, so words like \"as\", \"to\", and \"for\" will still be capitalized.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; title(\"Hello, world!\")\n'Hello World'\n\n&gt;&gt;&gt; title.match(\"Hello World\")\nTrue\n\n&gt;&gt;&gt; title.match(\"Hello, world!\")\nFalse\n</code></pre>"},{"location":"reference/#textcase.sentence","title":"sentence  <code>module-attribute</code>","text":"<pre><code>sentence = Case(delimiter=' ', transform=lambda words: word.capitalize() if i == 0 else word.lower() for (i, word) in enumerate(words))\n</code></pre> <p>Sentence case strings are delimited by spaces. Only the leading character of the first word is uppercase.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sentence(\"Hello, world!\")\n'Hello world'\n\n&gt;&gt;&gt; sentence.match(\"Hello world\")\nTrue\n\n&gt;&gt;&gt; sentence.match(\"Hello, world!\")\nFalse\n</code></pre>"},{"location":"reference/#textcase.Boundary","title":"Boundary  <code>dataclass</code>","text":"<pre><code>Boundary(match: Callable[[str], bool], start: int = 0, length: int = 0)\n</code></pre> <p>Represents a condition for splitting an identifier into words.</p> <p>Some boundaries, <code>HYPHEN</code>, <code>UNDERSCORE</code>, <code>SPACE</code>, and <code>INTERPUNCT</code> consume the character they split on, whereas the other boundaries do not.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DOT = Boundary(match=lambda text: text[:1] == \".\", length=1)\n\n&gt;&gt;&gt; DOT.match(\".brown\")\nTrue\n\n&gt;&gt;&gt; DOT.match(\"_brown\")\nFalse\n\n&gt;&gt;&gt; DOT.start\n0\n\n&gt;&gt;&gt; DOT.length\n1\n</code></pre>"},{"location":"reference/#textcase.Boundary.match","title":"match  <code>instance-attribute</code>","text":"<pre><code>match: Callable[[str], bool]\n</code></pre> <p>A function that determines if this boundary is present in the string.</p>"},{"location":"reference/#textcase.Boundary.start","title":"start  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start: int = 0\n</code></pre> <p>Where the beginning of the boundary is.</p>"},{"location":"reference/#textcase.Boundary.length","title":"length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>length: int = 0\n</code></pre> <p>The length of the boundary. This is the number of graphemes that are removed when splitting.</p>"},{"location":"reference/#textcase.Boundary.from_delimiter","title":"from_delimiter  <code>staticmethod</code>","text":"<pre><code>from_delimiter(delimiter: str) -&gt; Boundary\n</code></pre> <p>Create a new boundary instance from a delimiter string.</p> <p>This method makes it easier to create basic boundaries like <code>UNDERSCORE</code>, <code>HYPHEN</code>, <code>SPACE</code>, and <code>INTERPUNCT</code>.</p> PARAMETER DESCRIPTION <code>delimiter</code> <p>A string to be used as the delimiter for creating the boundary.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Boundary</code> <p>A new boundary instance, configured to match the provided delimiter.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DOT = Boundary.from_delimiter(\".\")\n\n&gt;&gt;&gt; DOT.match(\".brown\")\nTrue\n\n&gt;&gt;&gt; DOT.match(\"_brown\")\nFalse\n\n&gt;&gt;&gt; DOT.start\n0\n\n&gt;&gt;&gt; DOT.length\n1\n</code></pre> Source code in <code>src/textcase/__init__.py</code> <pre><code>@staticmethod\ndef from_delimiter(delimiter: str) -&gt; \"Boundary\":\n    \"\"\"Create a new boundary instance from a delimiter string.\n\n    This method makes it easier to create basic boundaries like `UNDERSCORE`, `HYPHEN`, `SPACE`, and `INTERPUNCT`.\n\n    Args:\n        delimiter: A string to be used as the delimiter for creating the boundary.\n\n    Returns:\n        A new boundary instance, configured to match the provided delimiter.\n\n    Examples:\n\n        &gt;&gt;&gt; DOT = Boundary.from_delimiter(\".\")\n\n        &gt;&gt;&gt; DOT.match(\".brown\")\n        True\n\n        &gt;&gt;&gt; DOT.match(\"_brown\")\n        False\n\n        &gt;&gt;&gt; DOT.start\n        0\n\n        &gt;&gt;&gt; DOT.length\n        1\n    \"\"\"\n    return Boundary(match=lambda s: s.startswith(delimiter), length=len(delimiter))\n</code></pre>"},{"location":"reference/#textcase.Case","title":"Case  <code>dataclass</code>","text":"<pre><code>Case(delimiter: str = '', transform: Callable[[Iterable[str]], Iterable[str]] = lambda words: words)\n</code></pre> <p>Represents a text case style.</p> <p>Each case instance defines how to split and transform text into a specific case style.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dot = Case(delimiter=\".\", transform=lambda words: map(str.lower, words))\n\n&gt;&gt;&gt; dot(\"Dot case var\")\n'dot.case.var'\n\n&gt;&gt;&gt; dot.match(\"dot.case.var\")\nTrue\n\n&gt;&gt;&gt; dot.match(\"Dot case var\")\nFalse\n\n&gt;&gt;&gt; dot.delimiter\n'.'\n</code></pre>"},{"location":"reference/#textcase.Case.delimiter","title":"delimiter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>delimiter: str = ''\n</code></pre> <p>The string used to join the transformed words together.</p>"},{"location":"reference/#textcase.Case.transform","title":"transform  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>transform: Callable[[Iterable[str]], Iterable[str]] = lambda words: words\n</code></pre> <p>A callable that defines how to transform the split words into the desired case format.</p>"},{"location":"reference/#textcase.Case.match","title":"match","text":"<pre><code>match(\n    text: str,\n    *,\n    boundaries: Iterable[Boundary] = (\n        UNDERSCORE,\n        HYPHEN,\n        SPACE,\n        INTERPUNCT,\n        LOWER_UPPER,\n        LOWER_DIGIT,\n        UPPER_DIGIT,\n        DIGIT_LOWER,\n        DIGIT_UPPER,\n        ACRONYM,\n    ),\n    strip_punctuation: bool = True,\n) -&gt; bool\n</code></pre> <p>Check if the given string matches the specified text case style.</p> <p>This method compares the input string with its converted version.</p> PARAMETER DESCRIPTION <code>text</code> <p>The input string to be checked.</p> <p> TYPE: <code>str</code> </p> <code>boundaries</code> <p>The boundaries that define how to split the given string.</p> <p> TYPE: <code>Iterable[Boundary]</code> DEFAULT: <code>(UNDERSCORE, HYPHEN, SPACE, INTERPUNCT, LOWER_UPPER, LOWER_DIGIT, UPPER_DIGIT, DIGIT_LOWER, DIGIT_UPPER, ACRONYM)</code> </p> <code>strip_punctuation</code> <p>Whether to remove punctuation during conversion.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>bool</code> <p><code>True</code> if the given string matches the specified text case style, and <code>False</code> otherwise.</p> Source code in <code>src/textcase/__init__.py</code> <pre><code>def match(\n    self,\n    text: str,\n    *,\n    boundaries: Iterable[Boundary] = (\n        UNDERSCORE,\n        HYPHEN,\n        SPACE,\n        INTERPUNCT,\n        LOWER_UPPER,\n        LOWER_DIGIT,\n        UPPER_DIGIT,\n        DIGIT_LOWER,\n        DIGIT_UPPER,\n        ACRONYM,\n    ),\n    strip_punctuation: bool = True,\n) -&gt; bool:\n    \"\"\"Check if the given string matches the specified text case style.\n\n    This method compares the input string with its converted version.\n\n    Args:\n        text: The input string to be checked.\n        boundaries: The boundaries that define how to split the given string.\n        strip_punctuation: Whether to remove punctuation during conversion.\n\n    Returns:\n        `True` if the given string matches the specified text case style, and `False` otherwise.\n    \"\"\"\n    return self(text, boundaries=boundaries, strip_punctuation=strip_punctuation) == text\n</code></pre>"},{"location":"reference/#textcase.Case.__call__","title":"__call__","text":"<pre><code>__call__(\n    text: str,\n    *,\n    boundaries: Iterable[Boundary] = (\n        UNDERSCORE,\n        HYPHEN,\n        SPACE,\n        INTERPUNCT,\n        LOWER_UPPER,\n        LOWER_DIGIT,\n        UPPER_DIGIT,\n        DIGIT_LOWER,\n        DIGIT_UPPER,\n        ACRONYM,\n    ),\n    strip_punctuation: bool = True,\n) -&gt; str\n</code></pre> <p>Convert the given string to the specified case format.</p> PARAMETER DESCRIPTION <code>text</code> <p>The input string to be converted.</p> <p> TYPE: <code>str</code> </p> <code>boundaries</code> <p>The boundaries that define how to split the given string.</p> <p> TYPE: <code>Iterable[Boundary]</code> DEFAULT: <code>(UNDERSCORE, HYPHEN, SPACE, INTERPUNCT, LOWER_UPPER, LOWER_DIGIT, UPPER_DIGIT, DIGIT_LOWER, DIGIT_UPPER, ACRONYM)</code> </p> <code>strip_punctuation</code> <p>Whether to remove punctuation during conversion.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The input string converted to the specified case format.</p> Source code in <code>src/textcase/__init__.py</code> <pre><code>def __call__(\n    self,\n    text: str,\n    *,\n    boundaries: Iterable[Boundary] = (\n        UNDERSCORE,\n        HYPHEN,\n        SPACE,\n        INTERPUNCT,\n        LOWER_UPPER,\n        LOWER_DIGIT,\n        UPPER_DIGIT,\n        DIGIT_LOWER,\n        DIGIT_UPPER,\n        ACRONYM,\n    ),\n    strip_punctuation: bool = True,\n) -&gt; str:\n    \"\"\"Convert the given string to the specified case format.\n\n    Args:\n        text: The input string to be converted.\n        boundaries: The boundaries that define how to split the given string.\n        strip_punctuation: Whether to remove punctuation during conversion.\n\n    Returns:\n        The input string converted to the specified case format.\n    \"\"\"\n    words: list[str] = []\n    text_length = len(text)\n    last_boundary_end = 0\n\n    for i in range(text_length):\n        for boundary in boundaries:\n            if boundary.match(text[i:]):\n                boundary_start = i + boundary.start\n                if last_boundary_end &lt; boundary_start:\n                    words.append(text[last_boundary_end:boundary_start])\n                last_boundary_end = boundary_start + boundary.length\n                break\n\n    if last_boundary_end &lt; text_length:\n        words.append(text[last_boundary_end:])\n\n    text = self.delimiter.join(self.transform(words))\n\n    if strip_punctuation:\n        text = text.strip(self.delimiter).translate(str.maketrans(\"\", \"\", punctuation.replace(self.delimiter, \"\")))\n\n    return text\n</code></pre>"},{"location":"learn/boundaries/","title":"Boundaries","text":"<p>Boundaries define where a string is divided into words. They allow you to control how a string is split during conversions between different naming conventions.</p> <p>Consider an abstract example where the <code>\"_\"</code> character is used as the boundary:</p> <p>Imagine the string: <code>\"A_B_C\"</code></p> <p>Using <code>\"_\"</code> as a boundary, the string is divided into distinct segments: <code>[\"A\", \"B\", \"C\"]</code></p>"},{"location":"learn/boundaries/#specificity-of-boundaries","title":"Specificity of Boundaries","text":"<p>It can be difficult to determine how to split a string into words.</p> <p>Let's say the string contains the word <code>\"2D\"</code>, for example <code>\"scale2D\"</code>, and we want to translate it to <code>snake</code> case. How do we decide what <code>boundaries</code> to use to split this string into words? Should it be <code>\"scale_2_d\"</code>, <code>\"scale_2d\"</code> or just <code>\"scale2d\"</code>?</p> <p>By default, the conversion method uses some predefined <code>boundaries</code>, but sometimes the predefined boundaries are not enough to meet a specific use case, so you can explicitly set which ones to use by providing instances of the <code>Boundary</code> class.</p> boundaries/specificity.py<pre><code>import textcase\n\ntextcase.snake(\"scale2D\")  # scale_2_d\n\ntextcase.snake(\"scale2D\", boundaries=[textcase.LOWER_DIGIT])  # scale_2d\ntextcase.snake(\"scale2D\", boundaries=[])  # scale2d\n</code></pre> <p>You can see a complete list of all built-in boundaries in the API Reference.</p>"},{"location":"learn/boundaries/#creating-custom-boundaries","title":"Creating Custom Boundaries","text":"<p>This library provides a number of constants for boundaries associated with common cases. But if you need to handle more specific cases, you can easily create custom boundaries and use them as well as built-in ones:</p> boundaries/custom_boundary.py<pre><code>from textcase import Boundary, title\n\ntitle(\"colors.brown\")  # Colorsbrown (1)\n\nDOT = Boundary.from_delimiter(\".\")  # (2)!\ntitle(\"colors.brown\", boundaries=[DOT])  # Colors Brown (3)\n</code></pre> <ol> <li> That is quite not what we want.    Since the library does not handle boundary with a dot (<code>\".\"</code>) by default,    we need to create it manually using the <code>Boundary</code> class.</li> <li> To achieve our goal we need to create a custom boundary    using the <code>Boundary.from_delimiter</code> method.</li> <li> Now we can explicitly set our custom boundary to the <code>boundaries</code>    argument and it will be used when splitting text!</li> </ol> <p>To learn more about building a custom boundary from scratch, take a look at the <code>Boundary</code> class.</p>"},{"location":"learn/cases/","title":"Cases","text":"<p>In fact, <code>snake</code>, <code>kebab</code>, etc. are not functions. They are instances of the <code>Case</code> class which has implemented the <code>object.__call__</code> dunder method for convenience: <code>Case.__call__</code>. This declarative syntax allows flexibly describe text cases while maintaining all functionality.</p> <p>You can see a complete list of all built-in cases in the API Reference.</p> How the case conversion works? <p>The case conversion happens in three steps:</p> <ol> <li>Splitting:    the input <code>text</code> is divided into words by scanning for boundaries.    Boundaries are conditions (or delimiters) that signal where one word ends and another begins.    For instance, a boundary might detect an underscore,    a change from lowercase to uppercase,    or even a digit-to-letter transition.    Each time a boundary is detected, the string is split at that position.</li> <li>Transforming:    once the <code>text</code> is split into words, the <code>transform</code> is applied.    This function (which you can customize) determines how each word will be transformed.    For instance, lowercase conversion, capitalization,    or an entirely custom transformation can be applied to each word.</li> <li>Joining:    finally, the transformed words are joined back together using    a defined <code>delimiter</code>. This <code>delimiter</code>    is specific to the case style (for example, underscores (<code>\"_\"</code>)    for <code>snake</code> case or hyphens (<code>\"-\"</code>) for <code>kebab</code> case).</li> </ol> <p>The result is the input text converted into the desired case.</p>"},{"location":"learn/cases/#creating-custom-cases","title":"Creating Custom Cases","text":"<p>Simular to <code>Boundary</code>, there is the <code>Case</code> class that allows you to define a custom case that behaves like a built-in one:</p> cases/custom_case.py<pre><code>from textcase import Case\n\ndot = Case(delimiter=\".\", transform=lambda words: map(str.lower, words))\n\ndot(\"Dot case var\")  # dot.case.var (1)\n\ndot.match(\"dot.case.var\")  # True (2)\ndot.match(\"Dot case var\")  # False (3)\n</code></pre> <ol> <li> Since <code>dot</code> is an instance of <code>Case</code>, it already converts text to the dot case\u2014just    call it like a function! </li> <li> With <code>dot</code>, you don't need to write a custom function to test for the case;    just use its <code>match</code> method! </li> <li> Again, leveraging <code>dot</code>'s <code>match</code> method, you can easily verify    if a string is in the dot case without any extra code! </li> </ol> <p>To learn more about building a custom case from scratch, take a look at the <code>Case</code> class.</p>"},{"location":"learn/recipes/","title":"Recipes","text":"<p>This section provides practical examples of using this library and code snippets.</p>"},{"location":"learn/recipes/#data-analysis","title":"Data Analysis","text":"<p>In data analysis workflows, converting column names to a consistent format, such as <code>snake</code>, can significantly simplify access to data and simplify its manipulation:</p>  analysis.py input.csv output.csv <pre><code>import csv\n\nfrom textcase import ACRONYM, Boundary, snake\n\nSCOPE = Boundary.from_delimiter(\"::\")\n\nwith open(\"input.csv\") as file:\n    reader = csv.DictReader(file)\n    reader.fieldnames = tuple(snake(column, boundaries=(ACRONYM, SCOPE)) for column in reader.fieldnames or ())\n\n    print(*reader.fieldnames, sep=\",\")\n\n    for row in reader:\n        print(*map(row.get, reader.fieldnames), sep=\",\")\n</code></pre> <pre><code>User::Id,User::Name,User::HTTPEndpoint\n1,John Doe,/api/users/1\n2,Jane Smith,/api/users/2\n3,Alice Johnson,/api/users/3\n4,Bob Brown,/api/users/4\n</code></pre> <pre><code>user_id,user_name,user_http_endpoint\n1,John Doe,/api/users/1\n2,Jane Smith,/api/users/2\n3,Alice Johnson,/api/users/3\n4,Bob Brown,/api/users/4\n</code></pre> <p>By converting column names to a more accessible format, you can later access data using <code>row[\"user_id\"]</code> instead of <code>row[\"User::Id\"]</code>. This approach simplifies the syntax and improves code readability, making it easier to work with the data.</p>"},{"location":"learn/recipes/#filenames-conversion","title":"Filenames Conversion","text":"<p>Different operating systems, such as Windows, macOS, and Linux, have distinct rules governing filenames. Issues can arise from spaces, special characters, and case sensitivity when sharing files across platforms. Converting filenames to a standardized format, such as <code>kebab</code>, enhances compatibility and minimizes the risk of errors when accessing files in various environments.</p> <p>Consider the following example filenames that users might upload to a web application for conversion into different file formats (e.g., Markdown to PDF, CSV to Excel):</p> <ul> <li><code>\"TODO #3 (Draft).md\"</code></li> <li><code>\"BigQuery.csv\"</code></li> <li><code>\"R\u00e9sum\u00e92025.docx\"</code></li> <li><code>\"LLMCache: \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 LLM \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.pptx\"</code></li> <li><code>\"The Python 3 Standard Library by Example.pdf\"</code></li> </ul> <p>For instance, the filename <code>\"TODO #3 (Draft).md\"</code> contains spaces and special characters, including <code>\"#\"</code>, which is interpreted as an anchor in URLs. This can result in broken links when generating download URLs. For example, the URL <code>\"https://example.com/download/TODO%20#3%20(Draft).md\"</code> may cause the browser to misinterpret the link, preventing users from accessing the intended file.</p> <p>To address this issue, you can use this library to convert filenames into a more compatible format:</p>  filenames.py result.md <pre><code>from pathlib import Path\n\nimport textcase\n\nfilenames = (\n    \"TODO #3 (Draft).md\",\n    \"BigQuery.csv\",\n    \"R\u00e9sum\u00e92025.DOCX\",\n    \"LLMCache: \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 LLM \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.pptx\",\n    \"The Python 3 Standard Library by Example.pdf\",\n)\n\nnew_filenames = (textcase.kebab(path.stem) + path.suffix.lower() for filename in filenames if (path := Path(filename)))\n\nfor filename, new_filename in zip(filenames, new_filenames):\n    print(filename, new_filename, sep=\",\")\n</code></pre> Original Filename New Filename TODO #3 (Draft).md todo-3-draft.md BigQuery.csv big-query.csv R\u00e9sum\u00e92025.DOCX r\u00e9sum\u00e9-2025.docx LLMCache: \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 LLM \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.pptx llm-cache-\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-llm-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.pptx The Python 3 Standard Library by Example.pdf the-python-3-standard-library-by-example.pdf <p>This conversion process ensures that filenames are safe for use across different platforms.</p>"},{"location":"ru/","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f","text":"textcase  <p>   Python \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u0442\u0435\u043a\u0441\u0442\u0430. </p> <p> </p>"},{"location":"ru/#\u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li> \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u0442\u0435\u043a\u0441\u0442\u0430: \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u043c\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, snake_case, kebab-case, camelCase \u0438 \u0442.\u0434.).</li> <li> \u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u044c: \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0439\u0442\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0445 \u0433\u0440\u0430\u043d\u0438\u0446 \u0441\u043b\u043e\u0432 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u0432 \u0442\u0435\u043a\u0441\u0442\u0430.</li> <li> \u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c: \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043b\u044e\u0431\u044b\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0441\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f (\u043a\u0430\u043a \u0432 <code>\"HTTPRequest\"</code>).</li> <li> \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043d\u0435-ASCII: \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043d\u0435-ASCII \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0431\u0435\u0437 \u043f\u0440\u043e\u0431\u043b\u0435\u043c (\u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0432\u044b\u0432\u043e\u0434\u043e\u0432 \u043e \u0441\u0430\u043c\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0432\u0432\u043e\u0434\u0430).</li> <li> \u041b\u0451\u0433\u043a\u043e\u0441\u0442\u044c, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043d\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439: \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0431\u0435\u0437 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0441\u0442\u0430\u0451\u0442\u0441\u044f \u043b\u0435\u0433\u043a\u043e\u0439 \u0438 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439.</li> <li> 100% \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u0442\u0435\u0441\u0442\u0430\u043c\u0438: \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043a\u043e\u0434\u0430 \u0442\u0449\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u043d\u0430\u0434\u0451\u0436\u043d\u043e\u0441\u0442\u044c.</li> <li> 100% \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u0434\u043e\u0432\u0430\u044f \u0431\u0430\u0437\u0430: \u043f\u043e\u043b\u043d\u044b\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u043e\u0432 \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043e\u043f\u044b\u0442\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</li> </ul>"},{"location":"ru/#\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"pip install textcase\u0413\u043e\u0442\u043e\u0432\u043e!"},{"location":"ru/#\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044b:</p> cases.py<pre><code>import textcase\n\ntextcase.snake(\"Hello, world!\")  # hello_world\ntextcase.constant(\"Hello, world!\")  # HELLO_WORLD\ntextcase.kebab(\"Hello, world!\")  # hello-world\ntextcase.middot(\"Hello, world!\")  # hello\u00b7world\ntextcase.camel(\"Hello, world!\")  # helloWorld\ntextcase.pascal(\"Hello, world!\")  # HelloWorld\ntextcase.lower(\"Hello, world!\")  # hello world\ntextcase.upper(\"Hello, world!\")  # HELLO WORLD\ntextcase.title(\"Hello, world!\")  # Hello World\ntextcase.sentence(\"Hello, world!\")  # Hello world\n</code></pre> <p>\u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432 \u043a\u0430\u043a\u043e\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430:</p> match.py<pre><code>import textcase\n\ntextcase.kebab.match(\"css-class-name\")  # True\ntextcase.snake.match(\"css-class-name\")  # False\ntextcase.snake.match(\"CSS_CLASS_NAME\")  # False\n</code></pre>"},{"location":"ru/#\u0433\u0440\u0430\u043d\u0438\u0446\u044b","title":"\u0413\u0440\u0430\u043d\u0438\u0446\u044b","text":"<p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u043b\u043e\u0432\u0430 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u0441\u043b\u043e\u0432, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e:</p> <ul> <li>\u041f\u043e\u0434\u0447\u0451\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u044f: <code>\"_\"</code>,</li> <li>\u0414\u0435\u0444\u0438\u0441\u044b: <code>\"-\"</code>,</li> <li>\u041f\u0440\u043e\u0431\u0435\u043b\u044b: <code>\" \"</code>,</li> <li>\u0418\u043d\u0442\u0435\u0440\u043f\u0443\u043d\u043a\u0442\u044b: <code>\"\u00b7\"</code>,</li> <li>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u0441 \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u043d\u0430 \u0432\u0435\u0440\u0445\u043d\u0438\u0439: <code>\"aA\"</code>,</li> <li>\u0421\u043e\u0441\u0435\u0434\u043d\u0438\u0435 \u0446\u0438\u0444\u0440\u044b \u0438 \u0431\u0443\u043a\u0432\u044b: <code>\"a1\"</code>, <code>\"1a\"</code>, <code>\"A1\"</code>, <code>\"1A\"</code>,</li> <li>\u0410\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f: <code>\"AAa\"</code> (\u043a\u0430\u043a \u0432 <code>\"HTTPRequest\"</code>).</li> </ul> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0437\u043d\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u0445 \u0442\u0443\u0442.</p>"},{"location":"ru/#\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c","title":"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c","text":"<p>\u0414\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0433\u0440\u0430\u043d\u0438\u0446 \u0441\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f:</p> precision.py<pre><code>import textcase\n\ntextcase.title(\"27-07_my_cat\")  # 27 07 My Cat\ntextcase.title(\"27-07_my_cat\", boundaries=[textcase.UNDERSCORE], strip_punctuation=False)  # 27-07 My Cat\n</code></pre> <p>\u042d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0442\u044c \u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0438 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0442\u0438\u043f\u0430 camel. \u041e\u043d\u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442 \u043b\u044e\u0431\u044b\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435, \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0438\u043b\u0438 \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438:</p> acronyms.py<pre><code>import textcase\n\ntextcase.snake(\"IOStream\")  # io_stream\ntextcase.snake(\"myJSONParser\")  # my_json_parser\ntextcase.snake(\"__weird--var _name-\")  # weird_var_name\n</code></pre>"},{"location":"ru/#\u043d\u0435-ascii-\u0441\u0438\u043c\u0432\u043e\u043b\u044b","title":"\u041d\u0435-ASCII \u0421\u0438\u043c\u0432\u043e\u043b\u044b","text":"<p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043d\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0432 ASCII. \u041e\u0434\u043d\u0430\u043a\u043e \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0432\u044b\u0432\u043e\u0434\u043e\u0432 \u043e \u0441\u0430\u043c\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0432\u0432\u043e\u0434\u0430 \u043d\u0435 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0433\u043e\u043b\u043b\u0430\u043d\u0434\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0434\u0438\u0433\u0440\u0430\u0444 <code>\"ij\"</code> \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0434\u0432\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 Unicode \u0438 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438. \u041d\u0430\u043f\u0440\u043e\u0442\u0438\u0432, \u0441\u0438\u043c\u0432\u043e\u043b <code>\"\u00e6\"</code> \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438, \u043a\u0430\u043a \u0438 \u043e\u0436\u0438\u0434\u0430\u043b\u043e\u0441\u044c. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0432 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0442\u0435\u043a\u0441\u0442 <code>\"I THINK I DO\"</code> \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d \u0432 <code>\"i think i do\"</code>, \u0430 \u043d\u0435 <code>\"I think I do\"</code>. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b:</p> non_ascii.py<pre><code>import textcase\n\ntextcase.kebab(\"Granat\u00c4pfel\")  # granat-\u00e4pfel\ntextcase.title(\"\u041f\u0415\u0420\u0421\u041f\u0415\u041a\u0422\u0418\u0412\u041024\")  # \u041f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u0430 24\ntextcase.lower(\"\u1f48\u0394\u03a5\u03a3\u03a3\u0395\u038e\u03a3\")  # \u1f40\u03b4\u03c5\u03c3\u03c3\u03b5\u03cd\u03c2\n</code></pre>"},{"location":"ru/#\u043f\u0443\u043d\u043a\u0442\u0443\u0430\u0446\u0438\u044f","title":"\u041f\u0443\u043d\u043a\u0442\u0443\u0430\u0446\u0438\u044f","text":"<p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0443\u043d\u043a\u0442\u0443\u0430\u0446\u0438\u0438 \u0443\u0434\u0430\u043b\u044f\u044e\u0442\u0441\u044f (\u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044f <code>delimiter</code> \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430), \u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u044d\u0442\u0438\u043c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 <code>strip_punctuation</code>:</p> punctuation.py<pre><code>import textcase\n\ntextcase.snake(\"E5150\")  # e_5150\ntextcase.title(\"ONE\\nTWO\")  # One\\ntwo\ntextcase.snake(\"10,000Days\")  # 10000_days\n\ntextcase.upper(\"Hello, world!\")  # HELLO WORLD\ntextcase.upper(\"Hello, world!\", strip_punctuation=False)  # HELLO, WORLD!\n</code></pre>"},{"location":"ru/reference/","title":"\u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f","text":""},{"location":"ru/learn/boundaries/","title":"\u0413\u0440\u0430\u043d\u0438\u0446\u044b","text":"<p>\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442, \u0433\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u043b\u043e\u0432\u0430. \u041e\u043d\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0432\u0430\u043c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u044f\u043c\u0438 \u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0438.</p> <p>\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440, \u0433\u0434\u0435 \u0441\u0438\u043c\u0432\u043e\u043b <code>\"_\"</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b:</p> <p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443: <code>\"A_B_C\"</code></p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>\"_\"</code> \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b, \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u044b: <code>[\"A\", \"B\", \"C\"]</code></p>"},{"location":"ru/learn/boundaries/#\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430-\u0433\u0440\u0430\u043d\u0438\u0446","title":"\u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430 \u0433\u0440\u0430\u043d\u0438\u0446","text":"<p>\u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u0441\u043b\u043e\u0432\u0430.</p> <p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u043e\u0432\u043e <code>\"2D\"</code>, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 <code>\"scale2D\"</code>, \u0438 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0435\u0433\u043e \u0432 \u0440\u0435\u0433\u0438\u0441\u0442\u0440 <code>snake</code>. \u041a\u0430\u043a \u043d\u0430\u043c \u0440\u0435\u0448\u0438\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 <code>boundaries</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0441\u043b\u043e\u0432\u0430? \u0414\u043e\u043b\u0436\u043d\u043e \u043b\u0438 \u044d\u0442\u043e \u0431\u044b\u0442\u044c <code>\"scale_2_d\"</code>, <code>\"scale_2d\"</code> \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e <code>\"scale2d\"</code>?</p> <p>\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043c\u0435\u0442\u043e\u0434 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 <code>boundaries</code>, \u043d\u043e \u0438\u043d\u043e\u0433\u0434\u0430 \u043f\u0440\u0435\u0434\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u043d\u0438\u0446 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043b\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430 <code>Boundary</code>.</p> boundaries/specificity.py<pre><code>import textcase\n\ntextcase.snake(\"scale2D\")  # scale_2_d\n\ntextcase.snake(\"scale2D\", boundaries=[textcase.LOWER_DIGIT])  # scale_2d\ntextcase.snake(\"scale2D\", boundaries=[])  # scale2d\n</code></pre> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u043d\u0438\u0446 \u0432 \u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 API.</p>"},{"location":"ru/learn/boundaries/#\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435-\u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0445-\u0433\u0440\u0430\u043d\u0438\u0446","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0445 \u0433\u0440\u0430\u043d\u0438\u0446","text":"<p>\u042d\u0442\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u044f\u0434 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0434\u043b\u044f \u0433\u0440\u0430\u043d\u0438\u0446, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u0431\u0449\u0438\u043c\u0438 \u0441\u043b\u0443\u0447\u0430\u044f\u043c\u0438. \u041d\u043e \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435:</p> boundaries/custom_boundary.py<pre><code>from textcase import Boundary, title\n\ntitle(\"colors.brown\")  # Colorsbrown (1)\n\nDOT = Boundary.from_delimiter(\".\")  # (2)!\ntitle(\"colors.brown\", boundaries=[DOT])  # Colors Brown (3)\n</code></pre> <ol> <li> \u042d\u0442\u043e \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435 \u0442\u043e, \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e.    \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0442\u043e\u0447\u043a\u043e\u0439 (<code>\".\"</code>) \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e,    \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0435\u0435 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043b\u0430\u0441\u0441\u0430 <code>Boundary</code>.</li> <li> \u0414\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u0448\u0435\u0439 \u0446\u0435\u043b\u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0443\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443    \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 <code>Boundary.from_delimiter</code>.</li> <li> \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u044f\u0432\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0430\u0448\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0443\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0434\u043b\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 <code>boundaries</code>    \u0438 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0442\u0435\u043a\u0441\u0442\u0430!</li> </ol> <p>\u0427\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u043d\u0443\u043b\u044f, \u0432\u0437\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u043d\u0430 \u043a\u043b\u0430\u0441\u0441 <code>Boundary</code>.</p>"},{"location":"ru/learn/cases/","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u044b","text":"<p>\u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, <code>snake</code>, <code>kebab</code> \u0438 \u0442. \u0434. \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438. \u041e\u043d\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 <code>Case</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b <code>object.__call__</code> dunder \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430: <code>Case.__call__</code>. \u042d\u0442\u043e\u0442 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0433\u0438\u0431\u043a\u043e \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0441\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0432 \u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 API.</p> \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430? <p>\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 \u0442\u0440\u0438 \u044d\u0442\u0430\u043f\u0430:</p> <ol> <li>\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435:    \u0432\u0445\u043e\u0434\u043d\u043e\u0439 <code>text</code> \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u043b\u043e\u0432\u0430 \u043f\u0443\u0442\u0435\u043c \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0433\u0440\u0430\u043d\u0438\u0446.    \u0413\u0440\u0430\u043d\u0438\u0446\u044b \u2014 \u044d\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f (\u0438\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0438\u0433\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0442, \u0433\u0434\u0435 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0434\u0440\u0443\u0433\u043e\u0435.    \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0442\u044c \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u0435,    \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043e \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u0431\u0443\u043a\u0432 \u043d\u0430 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435,    \u0438\u043b\u0438 \u0434\u0430\u0436\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u0446\u0438\u0444\u0440\u0430-\u0431\u0443\u043a\u0432\u0430.    \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430, \u0441\u0442\u0440\u043e\u043a\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u044d\u0442\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438.</li> <li>\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:    \u043f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a <code>text</code> \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d \u043d\u0430 \u0441\u043b\u043e\u0432\u0430, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f <code>transform</code>.    \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f (\u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c) \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442, \u043a\u0430\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043e \u043a\u0430\u0436\u0434\u043e\u0435 \u0441\u043b\u043e\u0432\u043e.    \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u043b\u043e\u0432\u0443 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u043c \u0431\u0443\u043a\u0432\u0430\u043c, \u043a\u0430\u043f\u0438\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e    \u0438\u043b\u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435.</li> <li>\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435:    \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e    \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e <code>delimiter</code>. \u042d\u0442\u043e\u0442 <code>delimiter</code>    \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u043d \u0434\u043b\u044f \u0441\u0442\u0438\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u044f (<code>\"_\"</code>)    \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 <code>snake</code> \u0438\u043b\u0438 \u0434\u0435\u0444\u0438\u0441\u044b (<code>\"-\"</code>) \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 <code>kebab</code>).</li> </ol> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0442\u0435\u043a\u0441\u0442, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432 \u043d\u0443\u0436\u043d\u044b\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440.</p>"},{"location":"ru/learn/cases/#\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435-\u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0445-\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u0432","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u0432","text":"<p>\u041f\u043e\u0434\u043e\u0431\u043d\u043e <code>Boundary</code>, \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 <code>Case</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0435\u0434\u0451\u0442 \u0441\u0435\u0431\u044f \u043a\u0430\u043a \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439:</p> cases/custom_case.py<pre><code>from textcase import Case\n\ndot = Case(delimiter=\".\", transform=lambda words: map(str.lower, words))\n\ndot(\"Dot case var\")  # dot.case.var (1)\n\ndot.match(\"dot.case.var\")  # True (2)\ndot.match(\"Dot case var\")  # False (3)\n</code></pre> <ol> <li> \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 <code>dot</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u043c <code>Case</code>, \u043e\u043d \u0443\u0436\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0440\u0435\u0433\u0438\u0441\u0442\u0440 <code>dot</code> \u2014 \u043f\u0440\u043e\u0441\u0442\u043e    \u0432\u044b\u0437\u043e\u0432\u0438\u0442\u0435 \u0435\u0433\u043e \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u044e! </li> <li> \u0414\u043b\u044f <code>dot</code> \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0438\u0441\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430;    \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u043c\u0435\u0442\u043e\u0434 <code>match</code>! </li> <li> \u041e\u043f\u044f\u0442\u044c \u0436\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 <code>match</code>, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c,    \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0432 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 <code>dot</code> \u0431\u0435\u0437 \u043a\u0430\u043a\u043e\u0433\u043e-\u043b\u0438\u0431\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430! </li> </ol> <p>\u0427\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u0441 \u043d\u0443\u043b\u044f, \u0432\u0437\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u043d\u0430 \u043a\u043b\u0430\u0441\u0441 <code>Case</code>.</p>"},{"location":"ru/learn/recipes/","title":"\u0420\u0435\u0446\u0435\u043f\u0442\u044b","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430.</p>"},{"location":"ru/learn/recipes/#\u0430\u043d\u0430\u043b\u0438\u0437-\u0434\u0430\u043d\u043d\u044b\u0445","title":"\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0412 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043c\u0451\u043d \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u0435\u0434\u0438\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 <code>snake</code>, \u043c\u043e\u0436\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0434\u0430\u043d\u043d\u044b\u043c \u0438 \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043c\u0438:</p>  analysis.py input.csv output.csv <pre><code>import csv\n\nfrom textcase import ACRONYM, Boundary, snake\n\nSCOPE = Boundary.from_delimiter(\"::\")\n\nwith open(\"input.csv\") as file:\n    reader = csv.DictReader(file)\n    reader.fieldnames = tuple(snake(column, boundaries=(ACRONYM, SCOPE)) for column in reader.fieldnames or ())\n\n    print(*reader.fieldnames, sep=\",\")\n\n    for row in reader:\n        print(*map(row.get, reader.fieldnames), sep=\",\")\n</code></pre> <pre><code>User::Id,User::Name,User::HTTPEndpoint\n1,John Doe,/api/users/1\n2,Jane Smith,/api/users/2\n3,Alice Johnson,/api/users/3\n4,Bob Brown,/api/users/4\n</code></pre> <pre><code>user_id,user_name,user_http_endpoint\n1,John Doe,/api/users/1\n2,Jane Smith,/api/users/2\n3,Alice Johnson,/api/users/3\n4,Bob Brown,/api/users/4\n</code></pre> <p>\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0432 \u0438\u043c\u0435\u043d\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u0431\u043e\u043b\u0435\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442, \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0437\u0436\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0434\u0430\u043d\u043d\u044b\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>row[\"user_id\"]</code> \u0432\u043c\u0435\u0441\u0442\u043e <code>row[\"User::Id\"]</code>. \u042d\u0442\u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u0438 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430, \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438.</p>"},{"location":"ru/learn/recipes/#\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435-\u0438\u043c\u0451\u043d-\u0444\u0430\u0439\u043b\u043e\u0432","title":"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043c\u0451\u043d \u0444\u0430\u0439\u043b\u043e\u0432","text":"<p>\u0420\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a Windows, macOS \u0438 Linux, \u0438\u043c\u0435\u044e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430, \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u043e\u0432. \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0442\u044c \u0438\u0437-\u0437\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u0445. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043c\u0451\u043d \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 <code>kebab</code>, \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0438 \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0440\u0438\u0441\u043a \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435 \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0430\u0445.</p> <p>\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u043c\u0451\u043d \u0444\u0430\u0439\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0432 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b \u0444\u0430\u0439\u043b\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Markdown \u0432 PDF, CSV \u0432 Excel):</p> <ul> <li><code>\"TODO #3 (Draft).md\"</code></li> <li><code>\"BigQuery.csv\"</code></li> <li><code>\"R\u00e9sum\u00e92025.docx\"</code></li> <li><code>\"LLMCache: \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 LLM \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.pptx\"</code></li> <li><code>\"The Python 3 Standard Library by Example.pdf\"</code></li> </ul> <p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 <code>\"TODO #3 (Draft).md\"</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u0432\u043a\u043b\u044e\u0447\u0430\u044f <code>\"#\"</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u044f\u043a\u043e\u0440\u044c (anchor) \u0432 URL-\u0430\u0434\u0440\u0435\u0441\u0430\u0445. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043d\u0435\u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0441\u0441\u044b\u043b\u043e\u043a \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, URL <code>\"https://example.com/download/TODO%20#3%20(Draft).md\"</code> \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u0443, \u043d\u0435 \u0434\u0430\u0432\u0430\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0444\u0430\u0439\u043b\u0443.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0440\u0435\u0448\u0438\u0442\u044c \u044d\u0442\u0443 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043c\u0451\u043d \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0431\u043e\u043b\u0435\u0435 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442:</p>  filenames.py result.md <pre><code>from pathlib import Path\n\nimport textcase\n\nfilenames = (\n    \"TODO #3 (Draft).md\",\n    \"BigQuery.csv\",\n    \"R\u00e9sum\u00e92025.DOCX\",\n    \"LLMCache: \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 LLM \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.pptx\",\n    \"The Python 3 Standard Library by Example.pdf\",\n)\n\nnew_filenames = (textcase.kebab(path.stem) + path.suffix.lower() for filename in filenames if (path := Path(filename)))\n\nfor filename, new_filename in zip(filenames, new_filenames):\n    print(filename, new_filename, sep=\",\")\n</code></pre> Original Filename New Filename TODO #3 (Draft).md todo-3-draft.md BigQuery.csv big-query.csv R\u00e9sum\u00e92025.DOCX r\u00e9sum\u00e9-2025.docx LLMCache: \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 LLM \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.pptx llm-cache-\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-llm-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.pptx The Python 3 Standard Library by Example.pdf the-python-3-standard-library-by-example.pdf <p>\u042d\u0442\u043e\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u0445.</p>"}]}